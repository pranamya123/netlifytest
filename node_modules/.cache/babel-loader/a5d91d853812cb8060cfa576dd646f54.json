{"ast":null,"code":"\"use strict\";\n\nfunction flattenDoc(doc) {\n  if (doc.type === \"concat\") {\n    var res = [];\n\n    for (var i = 0; i < doc.parts.length; ++i) {\n      var doc2 = doc.parts[i];\n\n      if (typeof doc2 !== \"string\" && doc2.type === \"concat\") {\n        [].push.apply(res, flattenDoc(doc2).parts);\n      } else {\n        var flattened = flattenDoc(doc2);\n\n        if (flattened !== \"\") {\n          res.push(flattened);\n        }\n      }\n    }\n\n    return Object.assign({}, doc, {\n      parts: res\n    });\n  } else if (doc.type === \"if-break\") {\n    return Object.assign({}, doc, {\n      breakContents: doc.breakContents != null ? flattenDoc(doc.breakContents) : null,\n      flatContents: doc.flatContents != null ? flattenDoc(doc.flatContents) : null\n    });\n  } else if (doc.type === \"group\") {\n    return Object.assign({}, doc, {\n      contents: flattenDoc(doc.contents),\n      expandedStates: doc.expandedStates ? doc.expandedStates.map(flattenDoc) : doc.expandedStates\n    });\n  } else if (doc.contents) {\n    return Object.assign({}, doc, {\n      contents: flattenDoc(doc.contents)\n    });\n  }\n\n  return doc;\n}\n\nfunction printDoc(doc) {\n  if (typeof doc === \"string\") {\n    return JSON.stringify(doc);\n  }\n\n  if (doc.type === \"line\") {\n    if (doc.literal) {\n      return \"literalline\";\n    }\n\n    if (doc.hard) {\n      return \"hardline\";\n    }\n\n    if (doc.soft) {\n      return \"softline\";\n    }\n\n    return \"line\";\n  }\n\n  if (doc.type === \"break-parent\") {\n    return \"breakParent\";\n  }\n\n  if (doc.type === \"trim\") {\n    return \"trim\";\n  }\n\n  if (doc.type === \"concat\") {\n    return \"[\" + doc.parts.map(printDoc).join(\", \") + \"]\";\n  }\n\n  if (doc.type === \"indent\") {\n    return \"indent(\" + printDoc(doc.contents) + \")\";\n  }\n\n  if (doc.type === \"align\") {\n    return doc.n === -Infinity ? \"dedentToRoot(\" + printDoc(doc.contents) + \")\" : doc.n < 0 ? \"dedent(\" + printDoc(doc.contents) + \")\" : doc.n.type === \"root\" ? \"markAsRoot(\" + printDoc(doc.contents) + \")\" : \"align(\" + JSON.stringify(doc.n) + \", \" + printDoc(doc.contents) + \")\";\n  }\n\n  if (doc.type === \"if-break\") {\n    return \"ifBreak(\" + printDoc(doc.breakContents) + (doc.flatContents ? \", \" + printDoc(doc.flatContents) : \"\") + \")\";\n  }\n\n  if (doc.type === \"group\") {\n    if (doc.expandedStates) {\n      return \"conditionalGroup(\" + \"[\" + doc.expandedStates.map(printDoc).join(\",\") + \"])\";\n    }\n\n    return (doc[\"break\"] ? \"wrappedGroup\" : \"group\") + \"(\" + printDoc(doc.contents) + \")\";\n  }\n\n  if (doc.type === \"fill\") {\n    return \"fill\" + \"(\" + doc.parts.map(printDoc).join(\", \") + \")\";\n  }\n\n  if (doc.type === \"line-suffix\") {\n    return \"lineSuffix(\" + printDoc(doc.contents) + \")\";\n  }\n\n  if (doc.type === \"line-suffix-boundary\") {\n    return \"lineSuffixBoundary\";\n  }\n\n  throw new Error(\"Unknown doc type \" + doc.type);\n}\n\nmodule.exports = {\n  printDocToDebug: function printDocToDebug(doc) {\n    return printDoc(flattenDoc(doc));\n  }\n};","map":{"version":3,"sources":["/Users/pranamyavadlamani/Desktop/Research/PortFolio/portfolio-site/node_modules/@miksu/prettier/lib/doc/doc-debug.js"],"names":["flattenDoc","doc","type","res","i","parts","length","doc2","push","apply","flattened","Object","assign","breakContents","flatContents","contents","expandedStates","map","printDoc","JSON","stringify","literal","hard","soft","join","n","Infinity","Error","module","exports","printDocToDebug"],"mappings":"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","sourcesContent":["\"use strict\";\n\nfunction flattenDoc(doc) {\n  if (doc.type === \"concat\") {\n    var res = [];\n\n    for (var i = 0; i < doc.parts.length; ++i) {\n      var doc2 = doc.parts[i];\n\n      if (typeof doc2 !== \"string\" && doc2.type === \"concat\") {\n        [].push.apply(res, flattenDoc(doc2).parts);\n      } else {\n        var flattened = flattenDoc(doc2);\n\n        if (flattened !== \"\") {\n          res.push(flattened);\n        }\n      }\n    }\n\n    return Object.assign({}, doc, {\n      parts: res\n    });\n  } else if (doc.type === \"if-break\") {\n    return Object.assign({}, doc, {\n      breakContents: doc.breakContents != null ? flattenDoc(doc.breakContents) : null,\n      flatContents: doc.flatContents != null ? flattenDoc(doc.flatContents) : null\n    });\n  } else if (doc.type === \"group\") {\n    return Object.assign({}, doc, {\n      contents: flattenDoc(doc.contents),\n      expandedStates: doc.expandedStates ? doc.expandedStates.map(flattenDoc) : doc.expandedStates\n    });\n  } else if (doc.contents) {\n    return Object.assign({}, doc, {\n      contents: flattenDoc(doc.contents)\n    });\n  }\n\n  return doc;\n}\n\nfunction printDoc(doc) {\n  if (typeof doc === \"string\") {\n    return JSON.stringify(doc);\n  }\n\n  if (doc.type === \"line\") {\n    if (doc.literal) {\n      return \"literalline\";\n    }\n\n    if (doc.hard) {\n      return \"hardline\";\n    }\n\n    if (doc.soft) {\n      return \"softline\";\n    }\n\n    return \"line\";\n  }\n\n  if (doc.type === \"break-parent\") {\n    return \"breakParent\";\n  }\n\n  if (doc.type === \"trim\") {\n    return \"trim\";\n  }\n\n  if (doc.type === \"concat\") {\n    return \"[\" + doc.parts.map(printDoc).join(\", \") + \"]\";\n  }\n\n  if (doc.type === \"indent\") {\n    return \"indent(\" + printDoc(doc.contents) + \")\";\n  }\n\n  if (doc.type === \"align\") {\n    return doc.n === -Infinity ? \"dedentToRoot(\" + printDoc(doc.contents) + \")\" : doc.n < 0 ? \"dedent(\" + printDoc(doc.contents) + \")\" : doc.n.type === \"root\" ? \"markAsRoot(\" + printDoc(doc.contents) + \")\" : \"align(\" + JSON.stringify(doc.n) + \", \" + printDoc(doc.contents) + \")\";\n  }\n\n  if (doc.type === \"if-break\") {\n    return \"ifBreak(\" + printDoc(doc.breakContents) + (doc.flatContents ? \", \" + printDoc(doc.flatContents) : \"\") + \")\";\n  }\n\n  if (doc.type === \"group\") {\n    if (doc.expandedStates) {\n      return \"conditionalGroup(\" + \"[\" + doc.expandedStates.map(printDoc).join(\",\") + \"])\";\n    }\n\n    return (doc[\"break\"] ? \"wrappedGroup\" : \"group\") + \"(\" + printDoc(doc.contents) + \")\";\n  }\n\n  if (doc.type === \"fill\") {\n    return \"fill\" + \"(\" + doc.parts.map(printDoc).join(\", \") + \")\";\n  }\n\n  if (doc.type === \"line-suffix\") {\n    return \"lineSuffix(\" + printDoc(doc.contents) + \")\";\n  }\n\n  if (doc.type === \"line-suffix-boundary\") {\n    return \"lineSuffixBoundary\";\n  }\n\n  throw new Error(\"Unknown doc type \" + doc.type);\n}\n\nmodule.exports = {\n  printDocToDebug: function printDocToDebug(doc) {\n    return printDoc(flattenDoc(doc));\n  }\n};"]},"metadata":{},"sourceType":"script"}