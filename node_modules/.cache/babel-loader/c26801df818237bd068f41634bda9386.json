{"ast":null,"code":"\"use strict\";\n\nvar docblock = require(\"jest-docblock\");\n\nfunction hasPragma(text) {\n  var pragmas = Object.keys(docblock.parse(docblock.extract(text)));\n  return pragmas.indexOf(\"prettier\") !== -1 || pragmas.indexOf(\"format\") !== -1;\n}\n\nfunction insertPragma(text) {\n  var parsedDocblock = docblock.parseWithComments(docblock.extract(text));\n  var pragmas = Object.assign({\n    format: \"\"\n  }, parsedDocblock.pragmas);\n  var newDocblock = docblock.print({\n    pragmas: pragmas,\n    comments: parsedDocblock.comments.replace(/^(\\s+?\\r?\\n)+/, \"\") // remove leading newlines\n\n  }).replace(/(\\r\\n|\\r)/g, \"\\n\"); // normalise newlines (mitigate use of os.EOL by jest-docblock)\n\n  var strippedText = docblock.strip(text);\n  var separatingNewlines = strippedText.startsWith(\"\\n\") ? \"\\n\" : \"\\n\\n\";\n  return newDocblock + separatingNewlines + strippedText;\n}\n\nmodule.exports = {\n  hasPragma: hasPragma,\n  insertPragma: insertPragma\n};","map":{"version":3,"sources":["/Users/pranamyavadlamani/Desktop/Research/PortFolio/portfolio-site/node_modules/@miksu/prettier/lib/language-js/pragma.js"],"names":["docblock","require","hasPragma","text","pragmas","Object","keys","parse","extract","indexOf","insertPragma","parsedDocblock","parseWithComments","assign","format","newDocblock","print","comments","replace","strippedText","strip","separatingNewlines","startsWith","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,eAAD,CAAtB;;AAEA,SAASC,SAAT,CAAmBC,IAAnB,EAAyB;AACvB,MAAIC,OAAO,GAAGC,MAAM,CAACC,IAAP,CAAYN,QAAQ,CAACO,KAAT,CAAeP,QAAQ,CAACQ,OAAT,CAAiBL,IAAjB,CAAf,CAAZ,CAAd;AACA,SAAOC,OAAO,CAACK,OAAR,CAAgB,UAAhB,MAAgC,CAAC,CAAjC,IAAsCL,OAAO,CAACK,OAAR,CAAgB,QAAhB,MAA8B,CAAC,CAA5E;AACD;;AAED,SAASC,YAAT,CAAsBP,IAAtB,EAA4B;AAC1B,MAAIQ,cAAc,GAAGX,QAAQ,CAACY,iBAAT,CAA2BZ,QAAQ,CAACQ,OAAT,CAAiBL,IAAjB,CAA3B,CAArB;AACA,MAAIC,OAAO,GAAGC,MAAM,CAACQ,MAAP,CAAc;AAC1BC,IAAAA,MAAM,EAAE;AADkB,GAAd,EAEXH,cAAc,CAACP,OAFJ,CAAd;AAGA,MAAIW,WAAW,GAAGf,QAAQ,CAACgB,KAAT,CAAe;AAC/BZ,IAAAA,OAAO,EAAEA,OADsB;AAE/Ba,IAAAA,QAAQ,EAAEN,cAAc,CAACM,QAAf,CAAwBC,OAAxB,CAAgC,eAAhC,EAAiD,EAAjD,CAFqB,CAEgC;;AAFhC,GAAf,EAIfA,OAJe,CAIP,YAJO,EAIO,IAJP,CAAlB,CAL0B,CASM;;AAEhC,MAAIC,YAAY,GAAGnB,QAAQ,CAACoB,KAAT,CAAejB,IAAf,CAAnB;AACA,MAAIkB,kBAAkB,GAAGF,YAAY,CAACG,UAAb,CAAwB,IAAxB,IAAgC,IAAhC,GAAuC,MAAhE;AACA,SAAOP,WAAW,GAAGM,kBAAd,GAAmCF,YAA1C;AACD;;AAEDI,MAAM,CAACC,OAAP,GAAiB;AACftB,EAAAA,SAAS,EAAEA,SADI;AAEfQ,EAAAA,YAAY,EAAEA;AAFC,CAAjB","sourcesContent":["\"use strict\";\n\nvar docblock = require(\"jest-docblock\");\n\nfunction hasPragma(text) {\n  var pragmas = Object.keys(docblock.parse(docblock.extract(text)));\n  return pragmas.indexOf(\"prettier\") !== -1 || pragmas.indexOf(\"format\") !== -1;\n}\n\nfunction insertPragma(text) {\n  var parsedDocblock = docblock.parseWithComments(docblock.extract(text));\n  var pragmas = Object.assign({\n    format: \"\"\n  }, parsedDocblock.pragmas);\n  var newDocblock = docblock.print({\n    pragmas: pragmas,\n    comments: parsedDocblock.comments.replace(/^(\\s+?\\r?\\n)+/, \"\") // remove leading newlines\n\n  }).replace(/(\\r\\n|\\r)/g, \"\\n\"); // normalise newlines (mitigate use of os.EOL by jest-docblock)\n\n  var strippedText = docblock.strip(text);\n  var separatingNewlines = strippedText.startsWith(\"\\n\") ? \"\\n\" : \"\\n\\n\";\n  return newDocblock + separatingNewlines + strippedText;\n}\n\nmodule.exports = {\n  hasPragma: hasPragma,\n  insertPragma: insertPragma\n};"]},"metadata":{},"sourceType":"script"}