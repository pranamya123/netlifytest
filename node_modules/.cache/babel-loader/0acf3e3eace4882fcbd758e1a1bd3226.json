{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst defaults_1 = require(\"./defaults\");\n\nconst utils_1 = require(\"./utils\");\n\nexports.normalize = (options, schemas, opts) => new Normalizer(schemas, opts).normalize(options);\n\nclass Normalizer {\n  constructor(schemas, opts) {\n    // istanbul ignore next\n    const {\n      logger = console,\n      descriptor = defaults_1.defaultDescriptor,\n      unknown = defaults_1.defaultUnknownHandler,\n      invalid = defaults_1.defaultInvalidHandler,\n      deprecated = defaults_1.defaultDeprecatedHandler\n    } = opts || {};\n    this._utils = {\n      descriptor,\n      logger:\n      /* istanbul ignore next */\n      logger || {\n        warn: () => {}\n      },\n      schemas: utils_1.recordFromArray(schemas, 'name'),\n      normalizeDefaultResult: utils_1.normalizeDefaultResult,\n      normalizeDeprecatedResult: utils_1.normalizeDeprecatedResult,\n      normalizeForwardResult: utils_1.normalizeForwardResult,\n      normalizeRedirectResult: utils_1.normalizeRedirectResult,\n      normalizeValidateResult: utils_1.normalizeValidateResult\n    };\n    this._unknownHandler = unknown;\n    this._invalidHandler = invalid;\n    this._deprecatedHandler = deprecated;\n    this.cleanHistory();\n  }\n\n  cleanHistory() {\n    this._hasDeprecationWarned = utils_1.createAutoChecklist();\n  }\n\n  normalize(options) {\n    const normalized = {};\n    const restOptionsArray = [options];\n\n    const applyNormalization = () => {\n      while (restOptionsArray.length !== 0) {\n        const currentOptions = restOptionsArray.shift();\n\n        const transferredOptionsArray = this._applyNormalization(currentOptions, normalized);\n\n        restOptionsArray.push(...transferredOptionsArray);\n      }\n    };\n\n    applyNormalization();\n\n    for (const key of Object.keys(this._utils.schemas)) {\n      const schema = this._utils.schemas[key];\n\n      if (!(key in normalized)) {\n        const defaultResult = utils_1.normalizeDefaultResult(schema.default(this._utils));\n\n        if ('value' in defaultResult) {\n          restOptionsArray.push({\n            [key]: defaultResult.value\n          });\n        }\n      }\n    }\n\n    applyNormalization();\n\n    for (const key of Object.keys(this._utils.schemas)) {\n      const schema = this._utils.schemas[key];\n\n      if (key in normalized) {\n        normalized[key] = schema.postprocess(normalized[key], this._utils);\n      }\n    }\n\n    return normalized;\n  }\n\n  _applyNormalization(options, normalized) {\n    const transferredOptionsArray = [];\n    const [knownOptionNames, unknownOptionNames] = utils_1.partition(Object.keys(options), key => key in this._utils.schemas);\n\n    for (const key of knownOptionNames) {\n      const schema = this._utils.schemas[key];\n      const value = schema.preprocess(options[key], this._utils);\n      const validateResult = utils_1.normalizeValidateResult(schema.validate(value, this._utils), value);\n\n      if (validateResult !== true) {\n        const {\n          value: invalidValue\n        } = validateResult;\n\n        const errorMessageOrError = this._invalidHandler(key, invalidValue, this._utils);\n\n        throw typeof errorMessageOrError === 'string' ? new Error(errorMessageOrError) :\n        /* istanbul ignore next*/\n        errorMessageOrError;\n      }\n\n      const appendTransferredOptions = ({\n        from,\n        to\n      }) => {\n        transferredOptionsArray.push(typeof to === 'string' ? {\n          [to]: from\n        } : {\n          [to.key]: to.value\n        });\n      };\n\n      const warnDeprecated = ({\n        value: currentValue,\n        redirectTo\n      }) => {\n        const deprecatedResult = utils_1.normalizeDeprecatedResult(schema.deprecated(currentValue, this._utils), value,\n        /* doNotNormalizeTrue */\n        true);\n\n        if (deprecatedResult === false) {\n          return;\n        }\n\n        if (deprecatedResult === true) {\n          if (!this._hasDeprecationWarned(key)) {\n            this._utils.logger.warn(this._deprecatedHandler(key, redirectTo, this._utils));\n          }\n        } else {\n          for (const {\n            value: deprecatedValue\n          } of deprecatedResult) {\n            const pair = {\n              key,\n              value: deprecatedValue\n            };\n\n            if (!this._hasDeprecationWarned(pair)) {\n              const redirectToPair = typeof redirectTo === 'string' ? {\n                key: redirectTo,\n                value: deprecatedValue\n              } : redirectTo;\n\n              this._utils.logger.warn(this._deprecatedHandler(pair, redirectToPair, this._utils));\n            }\n          }\n        }\n      };\n\n      const forwardResult = utils_1.normalizeForwardResult(schema.forward(value, this._utils), value);\n      forwardResult.forEach(appendTransferredOptions);\n      const redirectResult = utils_1.normalizeRedirectResult(schema.redirect(value, this._utils), value);\n      redirectResult.redirect.forEach(appendTransferredOptions);\n\n      if ('remain' in redirectResult) {\n        const remainingValue = redirectResult.remain;\n        normalized[key] = key in normalized ? schema.overlap(normalized[key], remainingValue, this._utils) : remainingValue;\n        warnDeprecated({\n          value: remainingValue\n        });\n      }\n\n      for (const {\n        from,\n        to\n      } of redirectResult.redirect) {\n        warnDeprecated({\n          value: from,\n          redirectTo: to\n        });\n      }\n    }\n\n    for (const key of unknownOptionNames) {\n      const value = options[key];\n\n      const unknownResult = this._unknownHandler(key, value, this._utils);\n\n      if (unknownResult) {\n        for (const unknownKey of Object.keys(unknownResult)) {\n          const unknownOption = {\n            [unknownKey]: unknownResult[unknownKey]\n          };\n\n          if (unknownKey in this._utils.schemas) {\n            transferredOptionsArray.push(unknownOption);\n          } else {\n            Object.assign(normalized, unknownOption);\n          }\n        }\n      }\n    }\n\n    return transferredOptionsArray;\n  }\n\n}\n\nexports.Normalizer = Normalizer;","map":{"version":3,"sources":["/Users/pranamyavadlamani/Desktop/Research/PortFolio/portfolio-site/node_modules/vnopts/lib/normalize.js"],"names":["Object","defineProperty","exports","value","defaults_1","require","utils_1","normalize","options","schemas","opts","Normalizer","constructor","logger","console","descriptor","defaultDescriptor","unknown","defaultUnknownHandler","invalid","defaultInvalidHandler","deprecated","defaultDeprecatedHandler","_utils","warn","recordFromArray","normalizeDefaultResult","normalizeDeprecatedResult","normalizeForwardResult","normalizeRedirectResult","normalizeValidateResult","_unknownHandler","_invalidHandler","_deprecatedHandler","cleanHistory","_hasDeprecationWarned","createAutoChecklist","normalized","restOptionsArray","applyNormalization","length","currentOptions","shift","transferredOptionsArray","_applyNormalization","push","key","keys","schema","defaultResult","default","postprocess","knownOptionNames","unknownOptionNames","partition","preprocess","validateResult","validate","invalidValue","errorMessageOrError","Error","appendTransferredOptions","from","to","warnDeprecated","currentValue","redirectTo","deprecatedResult","deprecatedValue","pair","redirectToPair","forwardResult","forward","forEach","redirectResult","redirect","remainingValue","remain","overlap","unknownResult","unknownKey","unknownOption","assign"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,UAAU,GAAGC,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,SAAD,CAAvB;;AACAH,OAAO,CAACK,SAAR,GAAoB,CAACC,OAAD,EAAUC,OAAV,EAAmBC,IAAnB,KAA4B,IAAIC,UAAJ,CAAeF,OAAf,EAAwBC,IAAxB,EAA8BH,SAA9B,CAAwCC,OAAxC,CAAhD;;AACA,MAAMG,UAAN,CAAiB;AACbC,EAAAA,WAAW,CAACH,OAAD,EAAUC,IAAV,EAAgB;AACvB;AACA,UAAM;AAAEG,MAAAA,MAAM,GAAGC,OAAX;AAAoBC,MAAAA,UAAU,GAAGX,UAAU,CAACY,iBAA5C;AAA+DC,MAAAA,OAAO,GAAGb,UAAU,CAACc,qBAApF;AAA2GC,MAAAA,OAAO,GAAGf,UAAU,CAACgB,qBAAhI;AAAuJC,MAAAA,UAAU,GAAGjB,UAAU,CAACkB;AAA/K,QAA6MZ,IAAI,IAAI,EAA3N;AACA,SAAKa,MAAL,GAAc;AACVR,MAAAA,UADU;AAEVF,MAAAA,MAAM;AAAE;AAA2BA,MAAAA,MAAM,IAAI;AAAEW,QAAAA,IAAI,EAAE,MAAM,CAAG;AAAjB,OAFnC;AAGVf,MAAAA,OAAO,EAAEH,OAAO,CAACmB,eAAR,CAAwBhB,OAAxB,EAAiC,MAAjC,CAHC;AAIViB,MAAAA,sBAAsB,EAAEpB,OAAO,CAACoB,sBAJtB;AAKVC,MAAAA,yBAAyB,EAAErB,OAAO,CAACqB,yBALzB;AAMVC,MAAAA,sBAAsB,EAAEtB,OAAO,CAACsB,sBANtB;AAOVC,MAAAA,uBAAuB,EAAEvB,OAAO,CAACuB,uBAPvB;AAQVC,MAAAA,uBAAuB,EAAExB,OAAO,CAACwB;AARvB,KAAd;AAUA,SAAKC,eAAL,GAAuBd,OAAvB;AACA,SAAKe,eAAL,GAAuBb,OAAvB;AACA,SAAKc,kBAAL,GAA0BZ,UAA1B;AACA,SAAKa,YAAL;AACH;;AACDA,EAAAA,YAAY,GAAG;AACX,SAAKC,qBAAL,GAA6B7B,OAAO,CAAC8B,mBAAR,EAA7B;AACH;;AACD7B,EAAAA,SAAS,CAACC,OAAD,EAAU;AACf,UAAM6B,UAAU,GAAG,EAAnB;AACA,UAAMC,gBAAgB,GAAG,CAAC9B,OAAD,CAAzB;;AACA,UAAM+B,kBAAkB,GAAG,MAAM;AAC7B,aAAOD,gBAAgB,CAACE,MAAjB,KAA4B,CAAnC,EAAsC;AAClC,cAAMC,cAAc,GAAGH,gBAAgB,CAACI,KAAjB,EAAvB;;AACA,cAAMC,uBAAuB,GAAG,KAAKC,mBAAL,CAAyBH,cAAzB,EAAyCJ,UAAzC,CAAhC;;AACAC,QAAAA,gBAAgB,CAACO,IAAjB,CAAsB,GAAGF,uBAAzB;AACH;AACJ,KAND;;AAOAJ,IAAAA,kBAAkB;;AAClB,SAAK,MAAMO,GAAX,IAAkB9C,MAAM,CAAC+C,IAAP,CAAY,KAAKxB,MAAL,CAAYd,OAAxB,CAAlB,EAAoD;AAChD,YAAMuC,MAAM,GAAG,KAAKzB,MAAL,CAAYd,OAAZ,CAAoBqC,GAApB,CAAf;;AACA,UAAI,EAAEA,GAAG,IAAIT,UAAT,CAAJ,EAA0B;AACtB,cAAMY,aAAa,GAAG3C,OAAO,CAACoB,sBAAR,CAA+BsB,MAAM,CAACE,OAAP,CAAe,KAAK3B,MAApB,CAA/B,CAAtB;;AACA,YAAI,WAAW0B,aAAf,EAA8B;AAC1BX,UAAAA,gBAAgB,CAACO,IAAjB,CAAsB;AAAE,aAACC,GAAD,GAAOG,aAAa,CAAC9C;AAAvB,WAAtB;AACH;AACJ;AACJ;;AACDoC,IAAAA,kBAAkB;;AAClB,SAAK,MAAMO,GAAX,IAAkB9C,MAAM,CAAC+C,IAAP,CAAY,KAAKxB,MAAL,CAAYd,OAAxB,CAAlB,EAAoD;AAChD,YAAMuC,MAAM,GAAG,KAAKzB,MAAL,CAAYd,OAAZ,CAAoBqC,GAApB,CAAf;;AACA,UAAIA,GAAG,IAAIT,UAAX,EAAuB;AACnBA,QAAAA,UAAU,CAACS,GAAD,CAAV,GAAkBE,MAAM,CAACG,WAAP,CAAmBd,UAAU,CAACS,GAAD,CAA7B,EAAoC,KAAKvB,MAAzC,CAAlB;AACH;AACJ;;AACD,WAAOc,UAAP;AACH;;AACDO,EAAAA,mBAAmB,CAACpC,OAAD,EAAU6B,UAAV,EAAsB;AACrC,UAAMM,uBAAuB,GAAG,EAAhC;AACA,UAAM,CAACS,gBAAD,EAAmBC,kBAAnB,IAAyC/C,OAAO,CAACgD,SAAR,CAAkBtD,MAAM,CAAC+C,IAAP,CAAYvC,OAAZ,CAAlB,EAAwCsC,GAAG,IAAIA,GAAG,IAAI,KAAKvB,MAAL,CAAYd,OAAlE,CAA/C;;AACA,SAAK,MAAMqC,GAAX,IAAkBM,gBAAlB,EAAoC;AAChC,YAAMJ,MAAM,GAAG,KAAKzB,MAAL,CAAYd,OAAZ,CAAoBqC,GAApB,CAAf;AACA,YAAM3C,KAAK,GAAG6C,MAAM,CAACO,UAAP,CAAkB/C,OAAO,CAACsC,GAAD,CAAzB,EAAgC,KAAKvB,MAArC,CAAd;AACA,YAAMiC,cAAc,GAAGlD,OAAO,CAACwB,uBAAR,CAAgCkB,MAAM,CAACS,QAAP,CAAgBtD,KAAhB,EAAuB,KAAKoB,MAA5B,CAAhC,EAAqEpB,KAArE,CAAvB;;AACA,UAAIqD,cAAc,KAAK,IAAvB,EAA6B;AACzB,cAAM;AAAErD,UAAAA,KAAK,EAAEuD;AAAT,YAA0BF,cAAhC;;AACA,cAAMG,mBAAmB,GAAG,KAAK3B,eAAL,CAAqBc,GAArB,EAA0BY,YAA1B,EAAwC,KAAKnC,MAA7C,CAA5B;;AACA,cAAM,OAAOoC,mBAAP,KAA+B,QAA/B,GACA,IAAIC,KAAJ,CAAUD,mBAAV,CADA;AAEA;AAA0BA,QAAAA,mBAFhC;AAGH;;AACD,YAAME,wBAAwB,GAAG,CAAC;AAAEC,QAAAA,IAAF;AAAQC,QAAAA;AAAR,OAAD,KAAkB;AAC/CpB,QAAAA,uBAAuB,CAACE,IAAxB,CAA6B,OAAOkB,EAAP,KAAc,QAAd,GAAyB;AAAE,WAACA,EAAD,GAAMD;AAAR,SAAzB,GAA0C;AAAE,WAACC,EAAE,CAACjB,GAAJ,GAAUiB,EAAE,CAAC5D;AAAf,SAAvE;AACH,OAFD;;AAGA,YAAM6D,cAAc,GAAG,CAAC;AAAE7D,QAAAA,KAAK,EAAE8D,YAAT;AAAuBC,QAAAA;AAAvB,OAAD,KAA0C;AAC7D,cAAMC,gBAAgB,GAAG7D,OAAO,CAACqB,yBAAR,CAAkCqB,MAAM,CAAC3B,UAAP,CAAkB4C,YAAlB,EAAgC,KAAK1C,MAArC,CAAlC,EAAgFpB,KAAhF;AACzB;AAAyB,YADA,CAAzB;;AAEA,YAAIgE,gBAAgB,KAAK,KAAzB,EAAgC;AAC5B;AACH;;AACD,YAAIA,gBAAgB,KAAK,IAAzB,EAA+B;AAC3B,cAAI,CAAC,KAAKhC,qBAAL,CAA2BW,GAA3B,CAAL,EAAsC;AAClC,iBAAKvB,MAAL,CAAYV,MAAZ,CAAmBW,IAAnB,CAAwB,KAAKS,kBAAL,CAAwBa,GAAxB,EAA6BoB,UAA7B,EAAyC,KAAK3C,MAA9C,CAAxB;AACH;AACJ,SAJD,MAKK;AACD,eAAK,MAAM;AAAEpB,YAAAA,KAAK,EAAEiE;AAAT,WAAX,IAAyCD,gBAAzC,EAA2D;AACvD,kBAAME,IAAI,GAAG;AAAEvB,cAAAA,GAAF;AAAO3C,cAAAA,KAAK,EAAEiE;AAAd,aAAb;;AACA,gBAAI,CAAC,KAAKjC,qBAAL,CAA2BkC,IAA3B,CAAL,EAAuC;AACnC,oBAAMC,cAAc,GAAG,OAAOJ,UAAP,KAAsB,QAAtB,GACjB;AAAEpB,gBAAAA,GAAG,EAAEoB,UAAP;AAAmB/D,gBAAAA,KAAK,EAAEiE;AAA1B,eADiB,GAEjBF,UAFN;;AAGA,mBAAK3C,MAAL,CAAYV,MAAZ,CAAmBW,IAAnB,CAAwB,KAAKS,kBAAL,CAAwBoC,IAAxB,EAA8BC,cAA9B,EAA8C,KAAK/C,MAAnD,CAAxB;AACH;AACJ;AACJ;AACJ,OAtBD;;AAuBA,YAAMgD,aAAa,GAAGjE,OAAO,CAACsB,sBAAR,CAA+BoB,MAAM,CAACwB,OAAP,CAAerE,KAAf,EAAsB,KAAKoB,MAA3B,CAA/B,EAAmEpB,KAAnE,CAAtB;AACAoE,MAAAA,aAAa,CAACE,OAAd,CAAsBZ,wBAAtB;AACA,YAAMa,cAAc,GAAGpE,OAAO,CAACuB,uBAAR,CAAgCmB,MAAM,CAAC2B,QAAP,CAAgBxE,KAAhB,EAAuB,KAAKoB,MAA5B,CAAhC,EAAqEpB,KAArE,CAAvB;AACAuE,MAAAA,cAAc,CAACC,QAAf,CAAwBF,OAAxB,CAAgCZ,wBAAhC;;AACA,UAAI,YAAYa,cAAhB,EAAgC;AAC5B,cAAME,cAAc,GAAGF,cAAc,CAACG,MAAtC;AACAxC,QAAAA,UAAU,CAACS,GAAD,CAAV,GACIA,GAAG,IAAIT,UAAP,GACMW,MAAM,CAAC8B,OAAP,CAAezC,UAAU,CAACS,GAAD,CAAzB,EAAgC8B,cAAhC,EAAgD,KAAKrD,MAArD,CADN,GAEMqD,cAHV;AAIAZ,QAAAA,cAAc,CAAC;AAAE7D,UAAAA,KAAK,EAAEyE;AAAT,SAAD,CAAd;AACH;;AACD,WAAK,MAAM;AAAEd,QAAAA,IAAF;AAAQC,QAAAA;AAAR,OAAX,IAA2BW,cAAc,CAACC,QAA1C,EAAoD;AAChDX,QAAAA,cAAc,CAAC;AAAE7D,UAAAA,KAAK,EAAE2D,IAAT;AAAeI,UAAAA,UAAU,EAAEH;AAA3B,SAAD,CAAd;AACH;AACJ;;AACD,SAAK,MAAMjB,GAAX,IAAkBO,kBAAlB,EAAsC;AAClC,YAAMlD,KAAK,GAAGK,OAAO,CAACsC,GAAD,CAArB;;AACA,YAAMiC,aAAa,GAAG,KAAKhD,eAAL,CAAqBe,GAArB,EAA0B3C,KAA1B,EAAiC,KAAKoB,MAAtC,CAAtB;;AACA,UAAIwD,aAAJ,EAAmB;AACf,aAAK,MAAMC,UAAX,IAAyBhF,MAAM,CAAC+C,IAAP,CAAYgC,aAAZ,CAAzB,EAAqD;AACjD,gBAAME,aAAa,GAAG;AAAE,aAACD,UAAD,GAAcD,aAAa,CAACC,UAAD;AAA7B,WAAtB;;AACA,cAAIA,UAAU,IAAI,KAAKzD,MAAL,CAAYd,OAA9B,EAAuC;AACnCkC,YAAAA,uBAAuB,CAACE,IAAxB,CAA6BoC,aAA7B;AACH,WAFD,MAGK;AACDjF,YAAAA,MAAM,CAACkF,MAAP,CAAc7C,UAAd,EAA0B4C,aAA1B;AACH;AACJ;AACJ;AACJ;;AACD,WAAOtC,uBAAP;AACH;;AA3HY;;AA6HjBzC,OAAO,CAACS,UAAR,GAAqBA,UAArB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst defaults_1 = require(\"./defaults\");\nconst utils_1 = require(\"./utils\");\nexports.normalize = (options, schemas, opts) => new Normalizer(schemas, opts).normalize(options);\nclass Normalizer {\n    constructor(schemas, opts) {\n        // istanbul ignore next\n        const { logger = console, descriptor = defaults_1.defaultDescriptor, unknown = defaults_1.defaultUnknownHandler, invalid = defaults_1.defaultInvalidHandler, deprecated = defaults_1.defaultDeprecatedHandler, } = opts || {};\n        this._utils = {\n            descriptor,\n            logger: /* istanbul ignore next */ logger || { warn: () => { } },\n            schemas: utils_1.recordFromArray(schemas, 'name'),\n            normalizeDefaultResult: utils_1.normalizeDefaultResult,\n            normalizeDeprecatedResult: utils_1.normalizeDeprecatedResult,\n            normalizeForwardResult: utils_1.normalizeForwardResult,\n            normalizeRedirectResult: utils_1.normalizeRedirectResult,\n            normalizeValidateResult: utils_1.normalizeValidateResult,\n        };\n        this._unknownHandler = unknown;\n        this._invalidHandler = invalid;\n        this._deprecatedHandler = deprecated;\n        this.cleanHistory();\n    }\n    cleanHistory() {\n        this._hasDeprecationWarned = utils_1.createAutoChecklist();\n    }\n    normalize(options) {\n        const normalized = {};\n        const restOptionsArray = [options];\n        const applyNormalization = () => {\n            while (restOptionsArray.length !== 0) {\n                const currentOptions = restOptionsArray.shift();\n                const transferredOptionsArray = this._applyNormalization(currentOptions, normalized);\n                restOptionsArray.push(...transferredOptionsArray);\n            }\n        };\n        applyNormalization();\n        for (const key of Object.keys(this._utils.schemas)) {\n            const schema = this._utils.schemas[key];\n            if (!(key in normalized)) {\n                const defaultResult = utils_1.normalizeDefaultResult(schema.default(this._utils));\n                if ('value' in defaultResult) {\n                    restOptionsArray.push({ [key]: defaultResult.value });\n                }\n            }\n        }\n        applyNormalization();\n        for (const key of Object.keys(this._utils.schemas)) {\n            const schema = this._utils.schemas[key];\n            if (key in normalized) {\n                normalized[key] = schema.postprocess(normalized[key], this._utils);\n            }\n        }\n        return normalized;\n    }\n    _applyNormalization(options, normalized) {\n        const transferredOptionsArray = [];\n        const [knownOptionNames, unknownOptionNames] = utils_1.partition(Object.keys(options), key => key in this._utils.schemas);\n        for (const key of knownOptionNames) {\n            const schema = this._utils.schemas[key];\n            const value = schema.preprocess(options[key], this._utils);\n            const validateResult = utils_1.normalizeValidateResult(schema.validate(value, this._utils), value);\n            if (validateResult !== true) {\n                const { value: invalidValue } = validateResult;\n                const errorMessageOrError = this._invalidHandler(key, invalidValue, this._utils);\n                throw typeof errorMessageOrError === 'string'\n                    ? new Error(errorMessageOrError)\n                    : /* istanbul ignore next*/ errorMessageOrError;\n            }\n            const appendTransferredOptions = ({ from, to }) => {\n                transferredOptionsArray.push(typeof to === 'string' ? { [to]: from } : { [to.key]: to.value });\n            };\n            const warnDeprecated = ({ value: currentValue, redirectTo, }) => {\n                const deprecatedResult = utils_1.normalizeDeprecatedResult(schema.deprecated(currentValue, this._utils), value, \n                /* doNotNormalizeTrue */ true);\n                if (deprecatedResult === false) {\n                    return;\n                }\n                if (deprecatedResult === true) {\n                    if (!this._hasDeprecationWarned(key)) {\n                        this._utils.logger.warn(this._deprecatedHandler(key, redirectTo, this._utils));\n                    }\n                }\n                else {\n                    for (const { value: deprecatedValue } of deprecatedResult) {\n                        const pair = { key, value: deprecatedValue };\n                        if (!this._hasDeprecationWarned(pair)) {\n                            const redirectToPair = typeof redirectTo === 'string'\n                                ? { key: redirectTo, value: deprecatedValue }\n                                : redirectTo;\n                            this._utils.logger.warn(this._deprecatedHandler(pair, redirectToPair, this._utils));\n                        }\n                    }\n                }\n            };\n            const forwardResult = utils_1.normalizeForwardResult(schema.forward(value, this._utils), value);\n            forwardResult.forEach(appendTransferredOptions);\n            const redirectResult = utils_1.normalizeRedirectResult(schema.redirect(value, this._utils), value);\n            redirectResult.redirect.forEach(appendTransferredOptions);\n            if ('remain' in redirectResult) {\n                const remainingValue = redirectResult.remain;\n                normalized[key] =\n                    key in normalized\n                        ? schema.overlap(normalized[key], remainingValue, this._utils)\n                        : remainingValue;\n                warnDeprecated({ value: remainingValue });\n            }\n            for (const { from, to } of redirectResult.redirect) {\n                warnDeprecated({ value: from, redirectTo: to });\n            }\n        }\n        for (const key of unknownOptionNames) {\n            const value = options[key];\n            const unknownResult = this._unknownHandler(key, value, this._utils);\n            if (unknownResult) {\n                for (const unknownKey of Object.keys(unknownResult)) {\n                    const unknownOption = { [unknownKey]: unknownResult[unknownKey] };\n                    if (unknownKey in this._utils.schemas) {\n                        transferredOptionsArray.push(unknownOption);\n                    }\n                    else {\n                        Object.assign(normalized, unknownOption);\n                    }\n                }\n            }\n        }\n        return transferredOptionsArray;\n    }\n}\nexports.Normalizer = Normalizer;\n"]},"metadata":{},"sourceType":"script"}