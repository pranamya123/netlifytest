{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n/*\nCopyright (c) 2020 Uber Technologies, Inc.\n\nThis source code is licensed under the MIT license found in the\nLICENSE file in the root directory of this source tree.\n*/\n\n\nimport template from '@babel/template';\nimport * as t from '@babel/types';\nimport { clone } from './utils';\nimport { PropTypes } from './const';\nimport { parse } from './ast'; // forked prettier on a diet\n//@ts-ignore\n\nimport prettier from '@miksu/prettier/lib/standalone'; //@ts-ignore\n\nimport parsers from '@miksu/prettier/lib/language-js/parser-babylon';\nconst reactImport = template.ast(`import * as React from 'react';`);\nexport const getAstPropValue = (prop, name, customProps) => {\n  const value = prop.value;\n\n  switch (prop.type) {\n    case PropTypes.String:\n      return t.stringLiteral(String(value));\n\n    case PropTypes.Boolean:\n      return t.booleanLiteral(Boolean(value));\n\n    case PropTypes.Enum:\n      if (!value) {\n        return t.identifier(String(value));\n      }\n\n      if (!prop.imports) {\n        return t.stringLiteral(String(value));\n      }\n\n      const [object, property] = String(value).split('.');\n      return t.memberExpression(t.identifier(object), property.includes('-') ? t.stringLiteral(property) : t.identifier(property), property.includes('-') ? true : false);\n\n    case PropTypes.Date:\n      return t.newExpression(t.identifier('Date'), value ? [t.stringLiteral(String(value))] : []);\n\n    case PropTypes.Ref:\n      return null;\n\n    case PropTypes.Object:\n      // need to add this bogus assignment so the value is recognized as an ObjectExpression\n      return template.ast(`a = ${value}`, {\n        plugins: ['jsx']\n      }).expression.right;\n\n    case PropTypes.Array:\n    case PropTypes.Number:\n    case PropTypes.Function:\n    case PropTypes.ReactNode:\n      const output = template.ast(String(value), {\n        plugins: ['jsx']\n      }).expression; // we never expect that user would input a variable as the value\n      // treat it as a string instead\n\n      if (output.type === 'Identifier') {\n        return t.stringLiteral(output.name);\n      }\n\n      return output;\n\n    case PropTypes.Custom:\n      if (!customProps[name] || !customProps[name].generate) {\n        console.error(`Missing customProps.${name}.generate definition.`);\n      }\n\n      return customProps[name].generate(value);\n  }\n};\nexport const getAstPropsArray = (props, customProps) => {\n  return Object.entries(props).map(([name, prop]) => {\n    const {\n      value,\n      stateful,\n      defaultValue\n    } = prop;\n    if (stateful) return t.jsxAttribute(t.jsxIdentifier(name), t.jsxExpressionContainer(t.identifier(name))); // When the `defaultValue` is set and `value` is the same as the `defaultValue`\n    // we don't add it to the list of props.\n    // It handles boolean props where `defaultValue` set to true,\n    // and enum props that have a `defaultValue` set to be displayed\n    // in the view correctly (checked checkboxes and selected default value in radio groups)\n    // and not rendered in the component's props.\n\n    if (typeof value !== 'boolean' && !value || value === defaultValue || typeof value === 'boolean' && !value && !defaultValue) {\n      return null;\n    }\n\n    const astValue = getAstPropValue(prop, name, customProps);\n    if (!astValue) return null; // shortcut render \"isDisabled\" vs \"isDisabled={true}\"\n\n    if (astValue.type === 'BooleanLiteral' && astValue.value === true) {\n      return t.jsxAttribute(t.jsxIdentifier(name), null);\n    }\n\n    return t.jsxAttribute(t.jsxIdentifier(name), astValue.type === 'StringLiteral' ? astValue : t.jsxExpressionContainer(astValue));\n  });\n};\nexport const getAstReactHooks = (props, customProps) => {\n  const hooks = [];\n  const buildReactHook = template(`const [%%name%%, %%setName%%] = React.useState(%%value%%);`);\n  Object.keys(props).forEach(name => {\n    if (props[name].stateful === true) {\n      hooks.push(buildReactHook({\n        name: t.identifier(name),\n        setName: t.identifier(`set${name[0].toUpperCase() + name.slice(1)}`),\n        value: getAstPropValue(props[name], name, customProps)\n      }));\n    }\n  });\n  return hooks;\n};\nexport const getAstImport = (identifiers, source, defaultIdentifier) => {\n  return t.importDeclaration([...(defaultIdentifier ? [t.importDefaultSpecifier(t.identifier(defaultIdentifier))] : []), ...identifiers.map(identifier => t.importSpecifier(t.identifier(identifier), t.identifier(identifier)))], t.stringLiteral(source));\n};\nexport const getAstJsxElement = (name, attrs, children) => {\n  const isSelfClosing = children.length === 0;\n  return t.jsxElement(t.jsxOpeningElement(t.jsxIdentifier(name), attrs.filter(attr => !!attr), isSelfClosing), isSelfClosing ? null : t.jsxClosingElement(t.jsxIdentifier(name)), children, true);\n};\nexport const addToImportList = (importList, imports) => {\n  for (const [importFrom, importNames] of Object.entries(imports)) {\n    if (!importList.hasOwnProperty(importFrom)) {\n      importList[importFrom] = {\n        named: [],\n        default: ''\n      };\n    }\n\n    if (importNames.default) {\n      importList[importFrom].default = importNames.default;\n    }\n\n    if (importNames.named && importNames.named.length > 0) {\n      if (!importList[importFrom].hasOwnProperty('named')) {\n        importList[importFrom]['named'] = [];\n      }\n\n      importList[importFrom].named = [...new Set(importList[importFrom].named.concat(importNames.named))];\n    }\n  }\n};\nexport const getAstImports = (importsConfig, providerImports, props) => {\n  // global scoped import that are always displayed\n  const importList = clone(importsConfig); // prop level imports (typically enums related) that are displayed\n  // only when the prop is being used\n\n  Object.values(props).forEach(prop => {\n    if (prop.imports && prop.value && prop.value !== '' && prop.value !== prop.defaultValue) {\n      addToImportList(importList, prop.imports);\n    }\n  });\n  addToImportList(importList, providerImports);\n  return Object.keys(importList).map(from => getAstImport(importList[from].named || [], from, importList[from].default));\n};\n\nconst getChildrenAst = value => {\n  return template.ast(`<>${value}</>`, {\n    plugins: ['jsx']\n  }).expression.children;\n};\n\nexport const getAst = (props, componentName, provider, providerValue, importsConfig, customProps) => {\n  const {\n    children\n  } = props,\n        restProps = __rest(props, [\"children\"]);\n\n  const buildExport = template(`export default () => {%%body%%}`);\n  return t.file(t.program([reactImport, ...getAstImports(importsConfig, providerValue ? provider.imports : {}, props), buildExport({\n    body: [...getAstReactHooks(restProps, customProps), t.returnStatement(provider.generate(providerValue, getAstJsxElement(componentName, getAstPropsArray(restProps, customProps), children && children.value ? getChildrenAst(String(children.value)) : [])))]\n  })]), [], []);\n};\nexport const formatAstAndPrint = (ast, printWidth) => {\n  const result = prettier.__debug.formatAST(ast, {\n    originalText: '',\n    parser: 'babel',\n    printWidth: printWidth ? printWidth : 58,\n    plugins: [parsers]\n  });\n\n  return result.formatted // add a new line before export\n  .replace('export default', `${result.formatted.startsWith('import ') ? '\\n' : ''}export default`) // remove newline at the end of file\n  .replace(/[\\r\\n]+$/, '') // remove ; at the end of file\n  .replace(/[;]+$/, '');\n};\nexport const formatCode = code => {\n  return formatAstAndPrint(parse(code));\n};\nexport const getCode = ({\n  props,\n  componentName,\n  provider,\n  providerValue,\n  importsConfig,\n  customProps\n}) => {\n  if (Object.keys(props).length === 0) {\n    return '';\n  }\n\n  const ast = getAst(props, componentName, provider, providerValue, importsConfig, customProps);\n  return formatAstAndPrint(ast);\n};","map":{"version":3,"sources":["../../src/code-generator.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n/*\nCopyright (c) 2020 Uber Technologies, Inc.\n\nThis source code is licensed under the MIT license found in the\nLICENSE file in the root directory of this source tree.\n*/\nimport template from '@babel/template';\nimport * as t from '@babel/types';\nimport { clone } from './utils';\nimport { PropTypes } from './const';\nimport { parse } from './ast';\n// forked prettier on a diet\n//@ts-ignore\nimport prettier from '@miksu/prettier/lib/standalone';\n//@ts-ignore\nimport parsers from '@miksu/prettier/lib/language-js/parser-babylon';\nconst reactImport = template.ast(`import * as React from 'react';`);\nexport const getAstPropValue = (prop, name, customProps) => {\n    const value = prop.value;\n    switch (prop.type) {\n        case PropTypes.String:\n            return t.stringLiteral(String(value));\n        case PropTypes.Boolean:\n            return t.booleanLiteral(Boolean(value));\n        case PropTypes.Enum:\n            if (!value) {\n                return t.identifier(String(value));\n            }\n            if (!prop.imports) {\n                return t.stringLiteral(String(value));\n            }\n            const [object, property] = String(value).split('.');\n            return t.memberExpression(t.identifier(object), property.includes('-')\n                ? t.stringLiteral(property)\n                : t.identifier(property), property.includes('-') ? true : false);\n        case PropTypes.Date:\n            return t.newExpression(t.identifier('Date'), value ? [t.stringLiteral(String(value))] : []);\n        case PropTypes.Ref:\n            return null;\n        case PropTypes.Object:\n            // need to add this bogus assignment so the value is recognized as an ObjectExpression\n            return template.ast(`a = ${value}`, { plugins: ['jsx'] })\n                .expression.right;\n        case PropTypes.Array:\n        case PropTypes.Number:\n        case PropTypes.Function:\n        case PropTypes.ReactNode:\n            const output = template.ast(String(value), { plugins: ['jsx'] })\n                .expression;\n            // we never expect that user would input a variable as the value\n            // treat it as a string instead\n            if (output.type === 'Identifier') {\n                return t.stringLiteral(output.name);\n            }\n            return output;\n        case PropTypes.Custom:\n            if (!customProps[name] || !customProps[name].generate) {\n                console.error(`Missing customProps.${name}.generate definition.`);\n            }\n            return customProps[name].generate(value);\n    }\n};\nexport const getAstPropsArray = (props, customProps) => {\n    return Object.entries(props).map(([name, prop]) => {\n        const { value, stateful, defaultValue } = prop;\n        if (stateful)\n            return t.jsxAttribute(t.jsxIdentifier(name), t.jsxExpressionContainer(t.identifier(name)));\n        // When the `defaultValue` is set and `value` is the same as the `defaultValue`\n        // we don't add it to the list of props.\n        // It handles boolean props where `defaultValue` set to true,\n        // and enum props that have a `defaultValue` set to be displayed\n        // in the view correctly (checked checkboxes and selected default value in radio groups)\n        // and not rendered in the component's props.\n        if ((typeof value !== 'boolean' && !value) ||\n            value === defaultValue ||\n            (typeof value === 'boolean' && !value && !defaultValue)) {\n            return null;\n        }\n        const astValue = getAstPropValue(prop, name, customProps);\n        if (!astValue)\n            return null;\n        // shortcut render \"isDisabled\" vs \"isDisabled={true}\"\n        if (astValue.type === 'BooleanLiteral' && astValue.value === true) {\n            return t.jsxAttribute(t.jsxIdentifier(name), null);\n        }\n        return t.jsxAttribute(t.jsxIdentifier(name), astValue.type === 'StringLiteral'\n            ? astValue\n            : t.jsxExpressionContainer(astValue));\n    });\n};\nexport const getAstReactHooks = (props, customProps) => {\n    const hooks = [];\n    const buildReactHook = template(`const [%%name%%, %%setName%%] = React.useState(%%value%%);`);\n    Object.keys(props).forEach(name => {\n        if (props[name].stateful === true) {\n            hooks.push(buildReactHook({\n                name: t.identifier(name),\n                setName: t.identifier(`set${name[0].toUpperCase() + name.slice(1)}`),\n                value: getAstPropValue(props[name], name, customProps),\n            }));\n        }\n    });\n    return hooks;\n};\nexport const getAstImport = (identifiers, source, defaultIdentifier) => {\n    return t.importDeclaration([\n        ...(defaultIdentifier\n            ? [t.importDefaultSpecifier(t.identifier(defaultIdentifier))]\n            : []),\n        ...identifiers.map(identifier => t.importSpecifier(t.identifier(identifier), t.identifier(identifier))),\n    ], t.stringLiteral(source));\n};\nexport const getAstJsxElement = (name, attrs, children) => {\n    const isSelfClosing = children.length === 0;\n    return t.jsxElement(t.jsxOpeningElement(t.jsxIdentifier(name), attrs.filter(attr => !!attr), isSelfClosing), isSelfClosing ? null : t.jsxClosingElement(t.jsxIdentifier(name)), children, true);\n};\nexport const addToImportList = (importList, imports) => {\n    for (const [importFrom, importNames] of Object.entries(imports)) {\n        if (!importList.hasOwnProperty(importFrom)) {\n            importList[importFrom] = {\n                named: [],\n                default: '',\n            };\n        }\n        if (importNames.default) {\n            importList[importFrom].default = importNames.default;\n        }\n        if (importNames.named && importNames.named.length > 0) {\n            if (!importList[importFrom].hasOwnProperty('named')) {\n                importList[importFrom]['named'] = [];\n            }\n            importList[importFrom].named = [\n                ...new Set(importList[importFrom].named.concat(importNames.named)),\n            ];\n        }\n    }\n};\nexport const getAstImports = (importsConfig, providerImports, props) => {\n    // global scoped import that are always displayed\n    const importList = clone(importsConfig);\n    // prop level imports (typically enums related) that are displayed\n    // only when the prop is being used\n    Object.values(props).forEach(prop => {\n        if (prop.imports &&\n            prop.value &&\n            prop.value !== '' &&\n            prop.value !== prop.defaultValue) {\n            addToImportList(importList, prop.imports);\n        }\n    });\n    addToImportList(importList, providerImports);\n    return Object.keys(importList).map(from => getAstImport(importList[from].named || [], from, importList[from].default));\n};\nconst getChildrenAst = (value) => {\n    return template.ast(`<>${value}</>`, {\n        plugins: ['jsx'],\n    }).expression.children;\n};\nexport const getAst = (props, componentName, provider, providerValue, importsConfig, customProps) => {\n    const { children } = props, restProps = __rest(props, [\"children\"]);\n    const buildExport = template(`export default () => {%%body%%}`);\n    return t.file(t.program([\n        reactImport,\n        ...getAstImports(importsConfig, providerValue ? provider.imports : {}, props),\n        buildExport({\n            body: [\n                ...getAstReactHooks(restProps, customProps),\n                t.returnStatement(provider.generate(providerValue, getAstJsxElement(componentName, getAstPropsArray(restProps, customProps), children && children.value\n                    ? getChildrenAst(String(children.value))\n                    : []))),\n            ],\n        }),\n    ]), [], []);\n};\nexport const formatAstAndPrint = (ast, printWidth) => {\n    const result = prettier.__debug.formatAST(ast, {\n        originalText: '',\n        parser: 'babel',\n        printWidth: printWidth ? printWidth : 58,\n        plugins: [parsers],\n    });\n    return (result.formatted\n        // add a new line before export\n        .replace('export default', `${result.formatted.startsWith('import ') ? '\\n' : ''}export default`)\n        // remove newline at the end of file\n        .replace(/[\\r\\n]+$/, '')\n        // remove ; at the end of file\n        .replace(/[;]+$/, ''));\n};\nexport const formatCode = (code) => {\n    return formatAstAndPrint(parse(code));\n};\nexport const getCode = ({ props, componentName, provider, providerValue, importsConfig, customProps, }) => {\n    if (Object.keys(props).length === 0) {\n        return '';\n    }\n    const ast = getAst(props, componentName, provider, providerValue, importsConfig, customProps);\n    return formatAstAndPrint(ast);\n};\n//# sourceMappingURL=code-generator.js.map"]},"metadata":{},"sourceType":"module"}