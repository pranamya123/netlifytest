{"ast":null,"code":"\"use strict\";\n\nvar assert = require(\"assert\");\n\nfunction FastPath(value) {\n  assert.ok(this instanceof FastPath);\n  this.stack = [value];\n} // The name of the current property is always the penultimate element of\n// this.stack, and always a String.\n\n\nFastPath.prototype.getName = function getName() {\n  var s = this.stack;\n  var len = s.length;\n\n  if (len > 1) {\n    return s[len - 2];\n  } // Since the name is always a string, null is a safe sentinel value to\n  // return if we do not know the name of the (root) value.\n\n  /* istanbul ignore next */\n\n\n  return null;\n}; // The value of the current property is always the final element of\n// this.stack.\n\n\nFastPath.prototype.getValue = function getValue() {\n  var s = this.stack;\n  return s[s.length - 1];\n};\n\nfunction getNodeHelper(path, count) {\n  var stackIndex = getNodeStackIndexHelper(path.stack, count);\n  return stackIndex === -1 ? null : path.stack[stackIndex];\n}\n\nfunction getNodeStackIndexHelper(stack, count) {\n  for (var i = stack.length - 1; i >= 0; i -= 2) {\n    var value = stack[i];\n\n    if (value && !Array.isArray(value) && --count < 0) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\nFastPath.prototype.getNode = function getNode(count) {\n  return getNodeHelper(this, ~~count);\n};\n\nFastPath.prototype.getParentNode = function getParentNode(count) {\n  return getNodeHelper(this, ~~count + 1);\n}; // Temporarily push properties named by string arguments given after the\n// callback function onto this.stack, then call the callback with a\n// reference to this (modified) FastPath object. Note that the stack will\n// be restored to its original state after the callback is finished, so it\n// is probably a mistake to retain a reference to the path.\n\n\nFastPath.prototype.call = function call(callback\n/*, name1, name2, ... */\n) {\n  var s = this.stack;\n  var origLen = s.length;\n  var value = s[origLen - 1];\n  var argc = arguments.length;\n\n  for (var i = 1; i < argc; ++i) {\n    var name = arguments[i];\n    value = value[name];\n    s.push(name, value);\n  }\n\n  var result = callback(this);\n  s.length = origLen;\n  return result;\n};\n\nFastPath.prototype.callParent = function callParent(callback, count) {\n  var stackIndex = getNodeStackIndexHelper(this.stack, ~~count + 1);\n  var parentValues = this.stack.splice(stackIndex + 1);\n  var result = callback(this);\n  Array.prototype.push.apply(this.stack, parentValues);\n  return result;\n}; // Similar to FastPath.prototype.call, except that the value obtained by\n// accessing this.getValue()[name1][name2]... should be array-like. The\n// callback will be called with a reference to this path object for each\n// element of the array.\n\n\nFastPath.prototype.each = function each(callback\n/*, name1, name2, ... */\n) {\n  var s = this.stack;\n  var origLen = s.length;\n  var value = s[origLen - 1];\n  var argc = arguments.length;\n\n  for (var i = 1; i < argc; ++i) {\n    var name = arguments[i];\n    value = value[name];\n    s.push(name, value);\n  }\n\n  for (var _i = 0; _i < value.length; ++_i) {\n    if (_i in value) {\n      s.push(_i, value[_i]); // If the callback needs to know the value of i, call\n      // path.getName(), assuming path is the parameter name.\n\n      callback(this);\n      s.length -= 2;\n    }\n  }\n\n  s.length = origLen;\n}; // Similar to FastPath.prototype.each, except that the results of the\n// callback function invocations are stored in an array and returned at\n// the end of the iteration.\n\n\nFastPath.prototype.map = function map(callback\n/*, name1, name2, ... */\n) {\n  var s = this.stack;\n  var origLen = s.length;\n  var value = s[origLen - 1];\n  var argc = arguments.length;\n\n  for (var i = 1; i < argc; ++i) {\n    var name = arguments[i];\n    value = value[name];\n    s.push(name, value);\n  }\n\n  var result = new Array(value.length);\n\n  for (var _i2 = 0; _i2 < value.length; ++_i2) {\n    if (_i2 in value) {\n      s.push(_i2, value[_i2]);\n      result[_i2] = callback(this, _i2);\n      s.length -= 2;\n    }\n  }\n\n  s.length = origLen;\n  return result;\n};\n\nmodule.exports = FastPath;","map":{"version":3,"sources":["/Users/pranamyavadlamani/Desktop/Research/PortFolio/portfolio-site/node_modules/@miksu/prettier/lib/common/fast-path.js"],"names":["assert","require","FastPath","value","ok","stack","prototype","getName","s","len","length","getValue","getNodeHelper","path","count","stackIndex","getNodeStackIndexHelper","i","Array","isArray","getNode","getParentNode","call","callback","origLen","argc","arguments","name","push","result","callParent","parentValues","splice","apply","each","_i","map","_i2","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar assert = require(\"assert\");\n\nfunction FastPath(value) {\n  assert.ok(this instanceof FastPath);\n  this.stack = [value];\n} // The name of the current property is always the penultimate element of\n// this.stack, and always a String.\n\n\nFastPath.prototype.getName = function getName() {\n  var s = this.stack;\n  var len = s.length;\n\n  if (len > 1) {\n    return s[len - 2];\n  } // Since the name is always a string, null is a safe sentinel value to\n  // return if we do not know the name of the (root) value.\n\n  /* istanbul ignore next */\n\n\n  return null;\n}; // The value of the current property is always the final element of\n// this.stack.\n\n\nFastPath.prototype.getValue = function getValue() {\n  var s = this.stack;\n  return s[s.length - 1];\n};\n\nfunction getNodeHelper(path, count) {\n  var stackIndex = getNodeStackIndexHelper(path.stack, count);\n  return stackIndex === -1 ? null : path.stack[stackIndex];\n}\n\nfunction getNodeStackIndexHelper(stack, count) {\n  for (var i = stack.length - 1; i >= 0; i -= 2) {\n    var value = stack[i];\n\n    if (value && !Array.isArray(value) && --count < 0) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\nFastPath.prototype.getNode = function getNode(count) {\n  return getNodeHelper(this, ~~count);\n};\n\nFastPath.prototype.getParentNode = function getParentNode(count) {\n  return getNodeHelper(this, ~~count + 1);\n}; // Temporarily push properties named by string arguments given after the\n// callback function onto this.stack, then call the callback with a\n// reference to this (modified) FastPath object. Note that the stack will\n// be restored to its original state after the callback is finished, so it\n// is probably a mistake to retain a reference to the path.\n\n\nFastPath.prototype.call = function call(callback\n/*, name1, name2, ... */\n) {\n  var s = this.stack;\n  var origLen = s.length;\n  var value = s[origLen - 1];\n  var argc = arguments.length;\n\n  for (var i = 1; i < argc; ++i) {\n    var name = arguments[i];\n    value = value[name];\n    s.push(name, value);\n  }\n\n  var result = callback(this);\n  s.length = origLen;\n  return result;\n};\n\nFastPath.prototype.callParent = function callParent(callback, count) {\n  var stackIndex = getNodeStackIndexHelper(this.stack, ~~count + 1);\n  var parentValues = this.stack.splice(stackIndex + 1);\n  var result = callback(this);\n  Array.prototype.push.apply(this.stack, parentValues);\n  return result;\n}; // Similar to FastPath.prototype.call, except that the value obtained by\n// accessing this.getValue()[name1][name2]... should be array-like. The\n// callback will be called with a reference to this path object for each\n// element of the array.\n\n\nFastPath.prototype.each = function each(callback\n/*, name1, name2, ... */\n) {\n  var s = this.stack;\n  var origLen = s.length;\n  var value = s[origLen - 1];\n  var argc = arguments.length;\n\n  for (var i = 1; i < argc; ++i) {\n    var name = arguments[i];\n    value = value[name];\n    s.push(name, value);\n  }\n\n  for (var _i = 0; _i < value.length; ++_i) {\n    if (_i in value) {\n      s.push(_i, value[_i]); // If the callback needs to know the value of i, call\n      // path.getName(), assuming path is the parameter name.\n\n      callback(this);\n      s.length -= 2;\n    }\n  }\n\n  s.length = origLen;\n}; // Similar to FastPath.prototype.each, except that the results of the\n// callback function invocations are stored in an array and returned at\n// the end of the iteration.\n\n\nFastPath.prototype.map = function map(callback\n/*, name1, name2, ... */\n) {\n  var s = this.stack;\n  var origLen = s.length;\n  var value = s[origLen - 1];\n  var argc = arguments.length;\n\n  for (var i = 1; i < argc; ++i) {\n    var name = arguments[i];\n    value = value[name];\n    s.push(name, value);\n  }\n\n  var result = new Array(value.length);\n\n  for (var _i2 = 0; _i2 < value.length; ++_i2) {\n    if (_i2 in value) {\n      s.push(_i2, value[_i2]);\n      result[_i2] = callback(this, _i2);\n      s.length -= 2;\n    }\n  }\n\n  s.length = origLen;\n  return result;\n};\n\nmodule.exports = FastPath;"]},"metadata":{},"sourceType":"script"}