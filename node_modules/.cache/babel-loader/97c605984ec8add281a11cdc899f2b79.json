{"ast":null,"code":"/* eslint-disable no-nested-ternary */\n'use strict';\n\nvar arr = [];\nvar charCodeCache = [];\n\nmodule.exports = function (a, b) {\n  if (a === b) {\n    return 0;\n  }\n\n  var swap = a; // Swapping the strings if `a` is longer than `b` so we know which one is the\n  // shortest & which one is the longest\n\n  if (a.length > b.length) {\n    a = b;\n    b = swap;\n  }\n\n  var aLen = a.length;\n  var bLen = b.length;\n\n  if (aLen === 0) {\n    return bLen;\n  }\n\n  if (bLen === 0) {\n    return aLen;\n  } // Performing suffix trimming:\n  // We can linearly drop suffix common to both strings since they\n  // don't increase distance at all\n  // Note: `~-` is the bitwise way to perform a `- 1` operation\n\n\n  while (aLen > 0 && a.charCodeAt(~-aLen) === b.charCodeAt(~-bLen)) {\n    aLen--;\n    bLen--;\n  }\n\n  if (aLen === 0) {\n    return bLen;\n  } // Performing prefix trimming\n  // We can linearly drop prefix common to both strings since they\n  // don't increase distance at all\n\n\n  var start = 0;\n\n  while (start < aLen && a.charCodeAt(start) === b.charCodeAt(start)) {\n    start++;\n  }\n\n  aLen -= start;\n  bLen -= start;\n\n  if (aLen === 0) {\n    return bLen;\n  }\n\n  var bCharCode;\n  var ret;\n  var tmp;\n  var tmp2;\n  var i = 0;\n  var j = 0;\n\n  while (i < aLen) {\n    charCodeCache[start + i] = a.charCodeAt(start + i);\n    arr[i] = ++i;\n  }\n\n  while (j < bLen) {\n    bCharCode = b.charCodeAt(start + j);\n    tmp = j++;\n    ret = j;\n\n    for (i = 0; i < aLen; i++) {\n      tmp2 = bCharCode === charCodeCache[start + i] ? tmp : tmp + 1;\n      tmp = arr[i];\n      ret = arr[i] = tmp > ret ? tmp2 > ret ? ret + 1 : tmp2 : tmp2 > tmp ? tmp + 1 : tmp2;\n    }\n  }\n\n  return ret;\n};","map":{"version":3,"sources":["/Users/pranamyavadlamani/Desktop/Research/PortFolio/portfolio-site/node_modules/vnopts/node_modules/leven/index.js"],"names":["arr","charCodeCache","module","exports","a","b","swap","length","aLen","bLen","charCodeAt","start","bCharCode","ret","tmp","tmp2","i","j"],"mappings":"AAAA;AACA;;AACA,IAAIA,GAAG,GAAG,EAAV;AACA,IAAIC,aAAa,GAAG,EAApB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAChC,MAAID,CAAC,KAAKC,CAAV,EAAa;AACZ,WAAO,CAAP;AACA;;AAED,MAAIC,IAAI,GAAGF,CAAX,CALgC,CAOhC;AACA;;AACA,MAAIA,CAAC,CAACG,MAAF,GAAWF,CAAC,CAACE,MAAjB,EAAyB;AACxBH,IAAAA,CAAC,GAAGC,CAAJ;AACAA,IAAAA,CAAC,GAAGC,IAAJ;AACA;;AAED,MAAIE,IAAI,GAAGJ,CAAC,CAACG,MAAb;AACA,MAAIE,IAAI,GAAGJ,CAAC,CAACE,MAAb;;AAEA,MAAIC,IAAI,KAAK,CAAb,EAAgB;AACf,WAAOC,IAAP;AACA;;AAED,MAAIA,IAAI,KAAK,CAAb,EAAgB;AACf,WAAOD,IAAP;AACA,GAvB+B,CAyBhC;AACA;AACA;AACA;;;AACA,SAAOA,IAAI,GAAG,CAAP,IAAaJ,CAAC,CAACM,UAAF,CAAa,CAAC,CAACF,IAAf,MAAyBH,CAAC,CAACK,UAAF,CAAa,CAAC,CAACD,IAAf,CAA7C,EAAoE;AACnED,IAAAA,IAAI;AACJC,IAAAA,IAAI;AACJ;;AAED,MAAID,IAAI,KAAK,CAAb,EAAgB;AACf,WAAOC,IAAP;AACA,GApC+B,CAsChC;AACA;AACA;;;AACA,MAAIE,KAAK,GAAG,CAAZ;;AAEA,SAAOA,KAAK,GAAGH,IAAR,IAAiBJ,CAAC,CAACM,UAAF,CAAaC,KAAb,MAAwBN,CAAC,CAACK,UAAF,CAAaC,KAAb,CAAhD,EAAsE;AACrEA,IAAAA,KAAK;AACL;;AAEDH,EAAAA,IAAI,IAAIG,KAAR;AACAF,EAAAA,IAAI,IAAIE,KAAR;;AAEA,MAAIH,IAAI,KAAK,CAAb,EAAgB;AACf,WAAOC,IAAP;AACA;;AAED,MAAIG,SAAJ;AACA,MAAIC,GAAJ;AACA,MAAIC,GAAJ;AACA,MAAIC,IAAJ;AACA,MAAIC,CAAC,GAAG,CAAR;AACA,MAAIC,CAAC,GAAG,CAAR;;AAEA,SAAOD,CAAC,GAAGR,IAAX,EAAiB;AAChBP,IAAAA,aAAa,CAACU,KAAK,GAAGK,CAAT,CAAb,GAA2BZ,CAAC,CAACM,UAAF,CAAaC,KAAK,GAAGK,CAArB,CAA3B;AACAhB,IAAAA,GAAG,CAACgB,CAAD,CAAH,GAAS,EAAEA,CAAX;AACA;;AAED,SAAOC,CAAC,GAAGR,IAAX,EAAiB;AAChBG,IAAAA,SAAS,GAAGP,CAAC,CAACK,UAAF,CAAaC,KAAK,GAAGM,CAArB,CAAZ;AACAH,IAAAA,GAAG,GAAGG,CAAC,EAAP;AACAJ,IAAAA,GAAG,GAAGI,CAAN;;AAEA,SAAKD,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGR,IAAhB,EAAsBQ,CAAC,EAAvB,EAA2B;AAC1BD,MAAAA,IAAI,GAAGH,SAAS,KAAKX,aAAa,CAACU,KAAK,GAAGK,CAAT,CAA3B,GAAyCF,GAAzC,GAA+CA,GAAG,GAAG,CAA5D;AACAA,MAAAA,GAAG,GAAGd,GAAG,CAACgB,CAAD,CAAT;AACAH,MAAAA,GAAG,GAAGb,GAAG,CAACgB,CAAD,CAAH,GAASF,GAAG,GAAGD,GAAN,GAAYE,IAAI,GAAGF,GAAP,GAAaA,GAAG,GAAG,CAAnB,GAAuBE,IAAnC,GAA0CA,IAAI,GAAGD,GAAP,GAAaA,GAAG,GAAG,CAAnB,GAAuBC,IAAhF;AACA;AACD;;AAED,SAAOF,GAAP;AACA,CA/ED","sourcesContent":["/* eslint-disable no-nested-ternary */\n'use strict';\nvar arr = [];\nvar charCodeCache = [];\n\nmodule.exports = function (a, b) {\n\tif (a === b) {\n\t\treturn 0;\n\t}\n\n\tvar swap = a;\n\n\t// Swapping the strings if `a` is longer than `b` so we know which one is the\n\t// shortest & which one is the longest\n\tif (a.length > b.length) {\n\t\ta = b;\n\t\tb = swap;\n\t}\n\n\tvar aLen = a.length;\n\tvar bLen = b.length;\n\n\tif (aLen === 0) {\n\t\treturn bLen;\n\t}\n\n\tif (bLen === 0) {\n\t\treturn aLen;\n\t}\n\n\t// Performing suffix trimming:\n\t// We can linearly drop suffix common to both strings since they\n\t// don't increase distance at all\n\t// Note: `~-` is the bitwise way to perform a `- 1` operation\n\twhile (aLen > 0 && (a.charCodeAt(~-aLen) === b.charCodeAt(~-bLen))) {\n\t\taLen--;\n\t\tbLen--;\n\t}\n\n\tif (aLen === 0) {\n\t\treturn bLen;\n\t}\n\n\t// Performing prefix trimming\n\t// We can linearly drop prefix common to both strings since they\n\t// don't increase distance at all\n\tvar start = 0;\n\n\twhile (start < aLen && (a.charCodeAt(start) === b.charCodeAt(start))) {\n\t\tstart++;\n\t}\n\n\taLen -= start;\n\tbLen -= start;\n\n\tif (aLen === 0) {\n\t\treturn bLen;\n\t}\n\n\tvar bCharCode;\n\tvar ret;\n\tvar tmp;\n\tvar tmp2;\n\tvar i = 0;\n\tvar j = 0;\n\n\twhile (i < aLen) {\n\t\tcharCodeCache[start + i] = a.charCodeAt(start + i);\n\t\tarr[i] = ++i;\n\t}\n\n\twhile (j < bLen) {\n\t\tbCharCode = b.charCodeAt(start + j);\n\t\ttmp = j++;\n\t\tret = j;\n\n\t\tfor (i = 0; i < aLen; i++) {\n\t\t\ttmp2 = bCharCode === charCodeCache[start + i] ? tmp : tmp + 1;\n\t\t\ttmp = arr[i];\n\t\t\tret = arr[i] = tmp > ret ? tmp2 > ret ? ret + 1 : tmp2 : tmp2 > tmp ? tmp + 1 : tmp2;\n\t\t}\n\t}\n\n\treturn ret;\n};\n"]},"metadata":{},"sourceType":"script"}