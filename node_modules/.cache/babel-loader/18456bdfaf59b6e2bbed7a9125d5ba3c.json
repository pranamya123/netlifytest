{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction clean(ast, newObj, parent) {\n  [\"range\", \"raw\", \"comments\", \"leadingComments\", \"trailingComments\", \"extra\", \"start\", \"end\", \"flags\"].forEach(function (name) {\n    delete newObj[name];\n  });\n\n  if (ast.type === \"BigIntLiteral\") {\n    newObj.value = newObj.value.toLowerCase();\n  } // We remove extra `;` and add them when needed\n\n\n  if (ast.type === \"EmptyStatement\") {\n    return null;\n  } // We move text around, including whitespaces and add {\" \"}\n\n\n  if (ast.type === \"JSXText\") {\n    return null;\n  }\n\n  if (ast.type === \"JSXExpressionContainer\" && ast.expression.type === \"Literal\" && ast.expression.value === \" \") {\n    return null;\n  } // (TypeScript) Ignore `static` in `constructor(static p) {}`\n  // and `export` in `constructor(export p) {}`\n\n\n  if (ast.type === \"TSParameterProperty\" && ast.accessibility === null && !ast.readonly) {\n    return {\n      type: \"Identifier\",\n      name: ast.parameter.name,\n      typeAnnotation: newObj.parameter.typeAnnotation,\n      decorators: newObj.decorators\n    };\n  } // (TypeScript) ignore empty `specifiers` array\n\n\n  if (ast.type === \"TSNamespaceExportDeclaration\" && ast.specifiers && ast.specifiers.length === 0) {\n    delete newObj.specifiers;\n  } // (TypeScript) bypass TSParenthesizedType\n\n\n  if (ast.type === \"TSParenthesizedType\") {\n    return newObj.typeAnnotation;\n  } // We convert <div></div> to <div />\n\n\n  if (ast.type === \"JSXOpeningElement\") {\n    delete newObj.selfClosing;\n  }\n\n  if (ast.type === \"JSXElement\") {\n    delete newObj.closingElement;\n  } // We change {'key': value} into {key: value}\n\n\n  if ((ast.type === \"Property\" || ast.type === \"ObjectProperty\" || ast.type === \"MethodDefinition\" || ast.type === \"ClassProperty\" || ast.type === \"TSPropertySignature\" || ast.type === \"ObjectTypeProperty\") && _typeof(ast.key) === \"object\" && ast.key && (ast.key.type === \"Literal\" || ast.key.type === \"StringLiteral\" || ast.key.type === \"Identifier\")) {\n    delete newObj.key;\n  }\n\n  if (ast.type === \"OptionalMemberExpression\" && ast.optional === false) {\n    newObj.type = \"MemberExpression\";\n    delete newObj.optional;\n  } // Remove raw and cooked values from TemplateElement when it's CSS\n  // styled-jsx\n\n\n  if (ast.type === \"JSXElement\" && ast.openingElement.name.name === \"style\" && ast.openingElement.attributes.some(function (attr) {\n    return attr.name.name === \"jsx\";\n  })) {\n    var templateLiterals = newObj.children.filter(function (child) {\n      return child.type === \"JSXExpressionContainer\" && child.expression.type === \"TemplateLiteral\";\n    }).map(function (container) {\n      return container.expression;\n    });\n    var quasis = templateLiterals.reduce(function (quasis, templateLiteral) {\n      return quasis.concat(templateLiteral.quasis);\n    }, []);\n    quasis.forEach(function (q) {\n      return delete q.value;\n    });\n  } // CSS template literals in css prop\n\n\n  if (ast.type === \"JSXAttribute\" && ast.name.name === \"css\" && ast.value.type === \"JSXExpressionContainer\" && ast.value.expression.type === \"TemplateLiteral\") {\n    newObj.value.expression.quasis.forEach(function (q) {\n      return delete q.value;\n    });\n  } // Angular Components: Inline HTML template and Inline CSS styles\n\n\n  var expression = ast.expression || ast.callee;\n\n  if (ast.type === \"Decorator\" && expression.type === \"CallExpression\" && expression.callee.name === \"Component\" && expression.arguments.length === 1) {\n    var astProps = ast.expression.arguments[0].properties;\n    newObj.expression.arguments[0].properties.forEach(function (prop, index) {\n      var templateLiteral = null;\n\n      switch (astProps[index].key.name) {\n        case \"styles\":\n          if (prop.value.type === \"ArrayExpression\") {\n            templateLiteral = prop.value.elements[0];\n          }\n\n          break;\n\n        case \"template\":\n          if (prop.value.type === \"TemplateLiteral\") {\n            templateLiteral = prop.value;\n          }\n\n          break;\n      }\n\n      if (templateLiteral) {\n        templateLiteral.quasis.forEach(function (q) {\n          return delete q.value;\n        });\n      }\n    });\n  } // styled-components, graphql, markdown\n\n\n  if (ast.type === \"TaggedTemplateExpression\" && (ast.tag.type === \"MemberExpression\" || ast.tag.type === \"Identifier\" && (ast.tag.name === \"gql\" || ast.tag.name === \"graphql\" || ast.tag.name === \"css\" || ast.tag.name === \"md\" || ast.tag.name === \"markdown\" || ast.tag.name === \"html\") || ast.tag.type === \"CallExpression\")) {\n    newObj.quasi.quasis.forEach(function (quasi) {\n      return delete quasi.value;\n    });\n  }\n\n  if (ast.type === \"TemplateLiteral\") {\n    // This checks for a leading comment that is exactly `/* GraphQL */`\n    // In order to be in line with other implementations of this comment tag\n    // we will not trim the comment value and we will expect exactly one space on\n    // either side of the GraphQL string\n    // Also see ./embed.js\n    var hasLanguageComment = ast.leadingComments && ast.leadingComments.some(function (comment) {\n      return comment.type === \"CommentBlock\" && [\"GraphQL\", \"HTML\"].some(function (languageName) {\n        return comment.value === \" \".concat(languageName, \" \");\n      });\n    });\n\n    if (hasLanguageComment || parent.type === \"CallExpression\" && parent.callee.name === \"graphql\") {\n      newObj.quasis.forEach(function (quasi) {\n        return delete quasi.value;\n      });\n    }\n  }\n}\n\nmodule.exports = clean;","map":{"version":3,"sources":["/Users/pranamyavadlamani/Desktop/Research/PortFolio/portfolio-site/node_modules/@miksu/prettier/lib/language-js/clean.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","clean","ast","newObj","parent","forEach","name","type","value","toLowerCase","expression","accessibility","readonly","parameter","typeAnnotation","decorators","specifiers","length","selfClosing","closingElement","key","optional","openingElement","attributes","some","attr","templateLiterals","children","filter","child","map","container","quasis","reduce","templateLiteral","concat","q","callee","arguments","astProps","properties","prop","index","elements","tag","quasi","hasLanguageComment","leadingComments","comment","languageName","module","exports"],"mappings":"AAAA;;AAEA,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE,MAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgC,OAAOA,MAAM,CAACC,QAAd,KAA2B,QAA/D,EAAyE;AAAEH,IAAAA,OAAO,GAAG,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE,aAAO,OAAOA,GAAd;AAAoB,KAAtD;AAAyD,GAApI,MAA0I;AAAED,IAAAA,OAAO,GAAG,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE,aAAOA,GAAG,IAAI,OAAOC,MAAP,KAAkB,UAAzB,IAAuCD,GAAG,CAACG,WAAJ,KAAoBF,MAA3D,IAAqED,GAAG,KAAKC,MAAM,CAACG,SAApF,GAAgG,QAAhG,GAA2G,OAAOJ,GAAzH;AAA+H,KAAjK;AAAoK;;AAAC,SAAOD,OAAO,CAACC,GAAD,CAAd;AAAsB;;AAE/V,SAASK,KAAT,CAAeC,GAAf,EAAoBC,MAApB,EAA4BC,MAA5B,EAAoC;AAClC,GAAC,OAAD,EAAU,KAAV,EAAiB,UAAjB,EAA6B,iBAA7B,EAAgD,kBAAhD,EAAoE,OAApE,EAA6E,OAA7E,EAAsF,KAAtF,EAA6F,OAA7F,EAAsGC,OAAtG,CAA8G,UAAUC,IAAV,EAAgB;AAC5H,WAAOH,MAAM,CAACG,IAAD,CAAb;AACD,GAFD;;AAIA,MAAIJ,GAAG,CAACK,IAAJ,KAAa,eAAjB,EAAkC;AAChCJ,IAAAA,MAAM,CAACK,KAAP,GAAeL,MAAM,CAACK,KAAP,CAAaC,WAAb,EAAf;AACD,GAPiC,CAOhC;;;AAGF,MAAIP,GAAG,CAACK,IAAJ,KAAa,gBAAjB,EAAmC;AACjC,WAAO,IAAP;AACD,GAZiC,CAYhC;;;AAGF,MAAIL,GAAG,CAACK,IAAJ,KAAa,SAAjB,EAA4B;AAC1B,WAAO,IAAP;AACD;;AAED,MAAIL,GAAG,CAACK,IAAJ,KAAa,wBAAb,IAAyCL,GAAG,CAACQ,UAAJ,CAAeH,IAAf,KAAwB,SAAjE,IAA8EL,GAAG,CAACQ,UAAJ,CAAeF,KAAf,KAAyB,GAA3G,EAAgH;AAC9G,WAAO,IAAP;AACD,GArBiC,CAqBhC;AACF;;;AAGA,MAAIN,GAAG,CAACK,IAAJ,KAAa,qBAAb,IAAsCL,GAAG,CAACS,aAAJ,KAAsB,IAA5D,IAAoE,CAACT,GAAG,CAACU,QAA7E,EAAuF;AACrF,WAAO;AACLL,MAAAA,IAAI,EAAE,YADD;AAELD,MAAAA,IAAI,EAAEJ,GAAG,CAACW,SAAJ,CAAcP,IAFf;AAGLQ,MAAAA,cAAc,EAAEX,MAAM,CAACU,SAAP,CAAiBC,cAH5B;AAILC,MAAAA,UAAU,EAAEZ,MAAM,CAACY;AAJd,KAAP;AAMD,GAhCiC,CAgChC;;;AAGF,MAAIb,GAAG,CAACK,IAAJ,KAAa,8BAAb,IAA+CL,GAAG,CAACc,UAAnD,IAAiEd,GAAG,CAACc,UAAJ,CAAeC,MAAf,KAA0B,CAA/F,EAAkG;AAChG,WAAOd,MAAM,CAACa,UAAd;AACD,GArCiC,CAqChC;;;AAGF,MAAId,GAAG,CAACK,IAAJ,KAAa,qBAAjB,EAAwC;AACtC,WAAOJ,MAAM,CAACW,cAAd;AACD,GA1CiC,CA0ChC;;;AAGF,MAAIZ,GAAG,CAACK,IAAJ,KAAa,mBAAjB,EAAsC;AACpC,WAAOJ,MAAM,CAACe,WAAd;AACD;;AAED,MAAIhB,GAAG,CAACK,IAAJ,KAAa,YAAjB,EAA+B;AAC7B,WAAOJ,MAAM,CAACgB,cAAd;AACD,GAnDiC,CAmDhC;;;AAGF,MAAI,CAACjB,GAAG,CAACK,IAAJ,KAAa,UAAb,IAA2BL,GAAG,CAACK,IAAJ,KAAa,gBAAxC,IAA4DL,GAAG,CAACK,IAAJ,KAAa,kBAAzE,IAA+FL,GAAG,CAACK,IAAJ,KAAa,eAA5G,IAA+HL,GAAG,CAACK,IAAJ,KAAa,qBAA5I,IAAqKL,GAAG,CAACK,IAAJ,KAAa,oBAAnL,KAA4MZ,OAAO,CAACO,GAAG,CAACkB,GAAL,CAAP,KAAqB,QAAjO,IAA6OlB,GAAG,CAACkB,GAAjP,KAAyPlB,GAAG,CAACkB,GAAJ,CAAQb,IAAR,KAAiB,SAAjB,IAA8BL,GAAG,CAACkB,GAAJ,CAAQb,IAAR,KAAiB,eAA/C,IAAkEL,GAAG,CAACkB,GAAJ,CAAQb,IAAR,KAAiB,YAA5U,CAAJ,EAA+V;AAC7V,WAAOJ,MAAM,CAACiB,GAAd;AACD;;AAED,MAAIlB,GAAG,CAACK,IAAJ,KAAa,0BAAb,IAA2CL,GAAG,CAACmB,QAAJ,KAAiB,KAAhE,EAAuE;AACrElB,IAAAA,MAAM,CAACI,IAAP,GAAc,kBAAd;AACA,WAAOJ,MAAM,CAACkB,QAAd;AACD,GA7DiC,CA6DhC;AACF;;;AAGA,MAAInB,GAAG,CAACK,IAAJ,KAAa,YAAb,IAA6BL,GAAG,CAACoB,cAAJ,CAAmBhB,IAAnB,CAAwBA,IAAxB,KAAiC,OAA9D,IAAyEJ,GAAG,CAACoB,cAAJ,CAAmBC,UAAnB,CAA8BC,IAA9B,CAAmC,UAAUC,IAAV,EAAgB;AAC9H,WAAOA,IAAI,CAACnB,IAAL,CAAUA,IAAV,KAAmB,KAA1B;AACD,GAF4E,CAA7E,EAEI;AACF,QAAIoB,gBAAgB,GAAGvB,MAAM,CAACwB,QAAP,CAAgBC,MAAhB,CAAuB,UAAUC,KAAV,EAAiB;AAC7D,aAAOA,KAAK,CAACtB,IAAN,KAAe,wBAAf,IAA2CsB,KAAK,CAACnB,UAAN,CAAiBH,IAAjB,KAA0B,iBAA5E;AACD,KAFsB,EAEpBuB,GAFoB,CAEhB,UAAUC,SAAV,EAAqB;AAC1B,aAAOA,SAAS,CAACrB,UAAjB;AACD,KAJsB,CAAvB;AAKA,QAAIsB,MAAM,GAAGN,gBAAgB,CAACO,MAAjB,CAAwB,UAAUD,MAAV,EAAkBE,eAAlB,EAAmC;AACtE,aAAOF,MAAM,CAACG,MAAP,CAAcD,eAAe,CAACF,MAA9B,CAAP;AACD,KAFY,EAEV,EAFU,CAAb;AAGAA,IAAAA,MAAM,CAAC3B,OAAP,CAAe,UAAU+B,CAAV,EAAa;AAC1B,aAAO,OAAOA,CAAC,CAAC5B,KAAhB;AACD,KAFD;AAGD,GA/EiC,CA+EhC;;;AAGF,MAAIN,GAAG,CAACK,IAAJ,KAAa,cAAb,IAA+BL,GAAG,CAACI,IAAJ,CAASA,IAAT,KAAkB,KAAjD,IAA0DJ,GAAG,CAACM,KAAJ,CAAUD,IAAV,KAAmB,wBAA7E,IAAyGL,GAAG,CAACM,KAAJ,CAAUE,UAAV,CAAqBH,IAArB,KAA8B,iBAA3I,EAA8J;AAC5JJ,IAAAA,MAAM,CAACK,KAAP,CAAaE,UAAb,CAAwBsB,MAAxB,CAA+B3B,OAA/B,CAAuC,UAAU+B,CAAV,EAAa;AAClD,aAAO,OAAOA,CAAC,CAAC5B,KAAhB;AACD,KAFD;AAGD,GAtFiC,CAsFhC;;;AAGF,MAAIE,UAAU,GAAGR,GAAG,CAACQ,UAAJ,IAAkBR,GAAG,CAACmC,MAAvC;;AAEA,MAAInC,GAAG,CAACK,IAAJ,KAAa,WAAb,IAA4BG,UAAU,CAACH,IAAX,KAAoB,gBAAhD,IAAoEG,UAAU,CAAC2B,MAAX,CAAkB/B,IAAlB,KAA2B,WAA/F,IAA8GI,UAAU,CAAC4B,SAAX,CAAqBrB,MAArB,KAAgC,CAAlJ,EAAqJ;AACnJ,QAAIsB,QAAQ,GAAGrC,GAAG,CAACQ,UAAJ,CAAe4B,SAAf,CAAyB,CAAzB,EAA4BE,UAA3C;AACArC,IAAAA,MAAM,CAACO,UAAP,CAAkB4B,SAAlB,CAA4B,CAA5B,EAA+BE,UAA/B,CAA0CnC,OAA1C,CAAkD,UAAUoC,IAAV,EAAgBC,KAAhB,EAAuB;AACvE,UAAIR,eAAe,GAAG,IAAtB;;AAEA,cAAQK,QAAQ,CAACG,KAAD,CAAR,CAAgBtB,GAAhB,CAAoBd,IAA5B;AACE,aAAK,QAAL;AACE,cAAImC,IAAI,CAACjC,KAAL,CAAWD,IAAX,KAAoB,iBAAxB,EAA2C;AACzC2B,YAAAA,eAAe,GAAGO,IAAI,CAACjC,KAAL,CAAWmC,QAAX,CAAoB,CAApB,CAAlB;AACD;;AAED;;AAEF,aAAK,UAAL;AACE,cAAIF,IAAI,CAACjC,KAAL,CAAWD,IAAX,KAAoB,iBAAxB,EAA2C;AACzC2B,YAAAA,eAAe,GAAGO,IAAI,CAACjC,KAAvB;AACD;;AAED;AAbJ;;AAgBA,UAAI0B,eAAJ,EAAqB;AACnBA,QAAAA,eAAe,CAACF,MAAhB,CAAuB3B,OAAvB,CAA+B,UAAU+B,CAAV,EAAa;AAC1C,iBAAO,OAAOA,CAAC,CAAC5B,KAAhB;AACD,SAFD;AAGD;AACF,KAxBD;AAyBD,GAtHiC,CAsHhC;;;AAGF,MAAIN,GAAG,CAACK,IAAJ,KAAa,0BAAb,KAA4CL,GAAG,CAAC0C,GAAJ,CAAQrC,IAAR,KAAiB,kBAAjB,IAAuCL,GAAG,CAAC0C,GAAJ,CAAQrC,IAAR,KAAiB,YAAjB,KAAkCL,GAAG,CAAC0C,GAAJ,CAAQtC,IAAR,KAAiB,KAAjB,IAA0BJ,GAAG,CAAC0C,GAAJ,CAAQtC,IAAR,KAAiB,SAA3C,IAAwDJ,GAAG,CAAC0C,GAAJ,CAAQtC,IAAR,KAAiB,KAAzE,IAAkFJ,GAAG,CAAC0C,GAAJ,CAAQtC,IAAR,KAAiB,IAAnG,IAA2GJ,GAAG,CAAC0C,GAAJ,CAAQtC,IAAR,KAAiB,UAA5H,IAA0IJ,GAAG,CAAC0C,GAAJ,CAAQtC,IAAR,KAAiB,MAA7L,CAAvC,IAA+OJ,GAAG,CAAC0C,GAAJ,CAAQrC,IAAR,KAAiB,gBAA5S,CAAJ,EAAmU;AACjUJ,IAAAA,MAAM,CAAC0C,KAAP,CAAab,MAAb,CAAoB3B,OAApB,CAA4B,UAAUwC,KAAV,EAAiB;AAC3C,aAAO,OAAOA,KAAK,CAACrC,KAApB;AACD,KAFD;AAGD;;AAED,MAAIN,GAAG,CAACK,IAAJ,KAAa,iBAAjB,EAAoC;AAClC;AACA;AACA;AACA;AACA;AACA,QAAIuC,kBAAkB,GAAG5C,GAAG,CAAC6C,eAAJ,IAAuB7C,GAAG,CAAC6C,eAAJ,CAAoBvB,IAApB,CAAyB,UAAUwB,OAAV,EAAmB;AAC1F,aAAOA,OAAO,CAACzC,IAAR,KAAiB,cAAjB,IAAmC,CAAC,SAAD,EAAY,MAAZ,EAAoBiB,IAApB,CAAyB,UAAUyB,YAAV,EAAwB;AACzF,eAAOD,OAAO,CAACxC,KAAR,KAAkB,IAAI2B,MAAJ,CAAWc,YAAX,EAAyB,GAAzB,CAAzB;AACD,OAFyC,CAA1C;AAGD,KAJ+C,CAAhD;;AAMA,QAAIH,kBAAkB,IAAI1C,MAAM,CAACG,IAAP,KAAgB,gBAAhB,IAAoCH,MAAM,CAACiC,MAAP,CAAc/B,IAAd,KAAuB,SAArF,EAAgG;AAC9FH,MAAAA,MAAM,CAAC6B,MAAP,CAAc3B,OAAd,CAAsB,UAAUwC,KAAV,EAAiB;AACrC,eAAO,OAAOA,KAAK,CAACrC,KAApB;AACD,OAFD;AAGD;AACF;AACF;;AAED0C,MAAM,CAACC,OAAP,GAAiBlD,KAAjB","sourcesContent":["\"use strict\";\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction clean(ast, newObj, parent) {\n  [\"range\", \"raw\", \"comments\", \"leadingComments\", \"trailingComments\", \"extra\", \"start\", \"end\", \"flags\"].forEach(function (name) {\n    delete newObj[name];\n  });\n\n  if (ast.type === \"BigIntLiteral\") {\n    newObj.value = newObj.value.toLowerCase();\n  } // We remove extra `;` and add them when needed\n\n\n  if (ast.type === \"EmptyStatement\") {\n    return null;\n  } // We move text around, including whitespaces and add {\" \"}\n\n\n  if (ast.type === \"JSXText\") {\n    return null;\n  }\n\n  if (ast.type === \"JSXExpressionContainer\" && ast.expression.type === \"Literal\" && ast.expression.value === \" \") {\n    return null;\n  } // (TypeScript) Ignore `static` in `constructor(static p) {}`\n  // and `export` in `constructor(export p) {}`\n\n\n  if (ast.type === \"TSParameterProperty\" && ast.accessibility === null && !ast.readonly) {\n    return {\n      type: \"Identifier\",\n      name: ast.parameter.name,\n      typeAnnotation: newObj.parameter.typeAnnotation,\n      decorators: newObj.decorators\n    };\n  } // (TypeScript) ignore empty `specifiers` array\n\n\n  if (ast.type === \"TSNamespaceExportDeclaration\" && ast.specifiers && ast.specifiers.length === 0) {\n    delete newObj.specifiers;\n  } // (TypeScript) bypass TSParenthesizedType\n\n\n  if (ast.type === \"TSParenthesizedType\") {\n    return newObj.typeAnnotation;\n  } // We convert <div></div> to <div />\n\n\n  if (ast.type === \"JSXOpeningElement\") {\n    delete newObj.selfClosing;\n  }\n\n  if (ast.type === \"JSXElement\") {\n    delete newObj.closingElement;\n  } // We change {'key': value} into {key: value}\n\n\n  if ((ast.type === \"Property\" || ast.type === \"ObjectProperty\" || ast.type === \"MethodDefinition\" || ast.type === \"ClassProperty\" || ast.type === \"TSPropertySignature\" || ast.type === \"ObjectTypeProperty\") && _typeof(ast.key) === \"object\" && ast.key && (ast.key.type === \"Literal\" || ast.key.type === \"StringLiteral\" || ast.key.type === \"Identifier\")) {\n    delete newObj.key;\n  }\n\n  if (ast.type === \"OptionalMemberExpression\" && ast.optional === false) {\n    newObj.type = \"MemberExpression\";\n    delete newObj.optional;\n  } // Remove raw and cooked values from TemplateElement when it's CSS\n  // styled-jsx\n\n\n  if (ast.type === \"JSXElement\" && ast.openingElement.name.name === \"style\" && ast.openingElement.attributes.some(function (attr) {\n    return attr.name.name === \"jsx\";\n  })) {\n    var templateLiterals = newObj.children.filter(function (child) {\n      return child.type === \"JSXExpressionContainer\" && child.expression.type === \"TemplateLiteral\";\n    }).map(function (container) {\n      return container.expression;\n    });\n    var quasis = templateLiterals.reduce(function (quasis, templateLiteral) {\n      return quasis.concat(templateLiteral.quasis);\n    }, []);\n    quasis.forEach(function (q) {\n      return delete q.value;\n    });\n  } // CSS template literals in css prop\n\n\n  if (ast.type === \"JSXAttribute\" && ast.name.name === \"css\" && ast.value.type === \"JSXExpressionContainer\" && ast.value.expression.type === \"TemplateLiteral\") {\n    newObj.value.expression.quasis.forEach(function (q) {\n      return delete q.value;\n    });\n  } // Angular Components: Inline HTML template and Inline CSS styles\n\n\n  var expression = ast.expression || ast.callee;\n\n  if (ast.type === \"Decorator\" && expression.type === \"CallExpression\" && expression.callee.name === \"Component\" && expression.arguments.length === 1) {\n    var astProps = ast.expression.arguments[0].properties;\n    newObj.expression.arguments[0].properties.forEach(function (prop, index) {\n      var templateLiteral = null;\n\n      switch (astProps[index].key.name) {\n        case \"styles\":\n          if (prop.value.type === \"ArrayExpression\") {\n            templateLiteral = prop.value.elements[0];\n          }\n\n          break;\n\n        case \"template\":\n          if (prop.value.type === \"TemplateLiteral\") {\n            templateLiteral = prop.value;\n          }\n\n          break;\n      }\n\n      if (templateLiteral) {\n        templateLiteral.quasis.forEach(function (q) {\n          return delete q.value;\n        });\n      }\n    });\n  } // styled-components, graphql, markdown\n\n\n  if (ast.type === \"TaggedTemplateExpression\" && (ast.tag.type === \"MemberExpression\" || ast.tag.type === \"Identifier\" && (ast.tag.name === \"gql\" || ast.tag.name === \"graphql\" || ast.tag.name === \"css\" || ast.tag.name === \"md\" || ast.tag.name === \"markdown\" || ast.tag.name === \"html\") || ast.tag.type === \"CallExpression\")) {\n    newObj.quasi.quasis.forEach(function (quasi) {\n      return delete quasi.value;\n    });\n  }\n\n  if (ast.type === \"TemplateLiteral\") {\n    // This checks for a leading comment that is exactly `/* GraphQL */`\n    // In order to be in line with other implementations of this comment tag\n    // we will not trim the comment value and we will expect exactly one space on\n    // either side of the GraphQL string\n    // Also see ./embed.js\n    var hasLanguageComment = ast.leadingComments && ast.leadingComments.some(function (comment) {\n      return comment.type === \"CommentBlock\" && [\"GraphQL\", \"HTML\"].some(function (languageName) {\n        return comment.value === \" \".concat(languageName, \" \");\n      });\n    });\n\n    if (hasLanguageComment || parent.type === \"CallExpression\" && parent.callee.name === \"graphql\") {\n      newObj.quasis.forEach(function (quasi) {\n        return delete quasi.value;\n      });\n    }\n  }\n}\n\nmodule.exports = clean;"]},"metadata":{},"sourceType":"script"}