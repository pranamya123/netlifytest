{"ast":null,"code":"/*\nCopyright (c) 2020 Uber Technologies, Inc.\n\nThis source code is licensed under the MIT license found in the\nLICENSE file in the root directory of this source tree.\n*/\nimport { clone } from '../utils';\nimport { PropTypes, formatCode as rvFormatCode } from '../';\nimport { addToImportList } from '../code-generator';\n\nconst formatCode = code => {\n  if (code && typeof code === 'string') {\n    const isJsx = code.startsWith('<');\n\n    try {\n      if (isJsx) {\n        code = rvFormatCode(`<>${code}</>`);\n      } else {\n        code = rvFormatCode(`<>{${code}}</>`);\n      }\n\n      const addSpaces = !code.startsWith('<>\\n');\n\n      if (isJsx) {\n        code = code.replace(/^<>\\s*/, '').replace(/\\s*<\\/>$/, '');\n      } else {\n        code = code.replace(/^<>\\s*\\{/, '').replace(/\\}\\s*<\\/>$/, '');\n      }\n\n      if (addSpaces) {\n        code = code.replace(/\\n/g, '\\n  ');\n      }\n    } catch (e) {}\n\n    code = code.replace(/\\}/g, '\\\\}').replace(/\\$/g, '\\\\$');\n  }\n\n  return code;\n};\n\nconst joinNamed = (items, ctr) => {\n  if (!items) return '';\n  let output = `\\${${ctr++}:{`;\n\n  for (let i = 0; i < items.length; i++) {\n    if (i !== items.length - 1) {\n      output += `\\${${ctr++}:${items[i]}, }`;\n    } else {\n      output += `\\${${ctr++}:${items[i]}}`;\n    }\n  }\n\n  return `${output}\\\\}}`;\n};\n\nconst getImportBody = (imports, props) => {\n  const importList = imports ? clone(imports) : {}; // prop level imports (typically enums related) that are displayed\n  // only when the prop is being used\n\n  props && Object.values(props).forEach(prop => {\n    if (prop.imports) {\n      addToImportList(importList, prop.imports);\n    }\n  });\n  const importBody = [];\n  let ctr = 1;\n\n  for (const from in importList) {\n    const def = importList[from].default;\n    const named = Array.isArray(importList[from].named) && importList[from].named.length > 0 ? importList[from].named : undefined;\n    const defaultImport = def ? `\\${${ctr++}:${def}${named ? ', }' : '}'}` : '';\n    importBody.push(`import ${defaultImport}${joinNamed(named, ctr)} from '${from}';`);\n\n    if (named) {\n      ctr += named.length + 1;\n    }\n  }\n\n  return importBody;\n};\n\nconst getComponentBody = (componentName, props) => {\n  let ctr = 1;\n  const componentBody = [`<${componentName}`];\n\n  if (props) {\n    for (const propName in props) {\n      if (props[propName].hidden) continue;\n      if (propName === 'children') continue;\n\n      if (props[propName].type === PropTypes.Boolean) {\n        const row = `  \\${${ctr++}:${propName}}`;\n        componentBody.push(row);\n      } else if (props[propName].type === PropTypes.Enum) {\n        const enumName = props[propName].imports ? props[propName].enumName || propName.toUpperCase() : null;\n        const opts = Object.values(props[propName].options).map(opt => enumName ? opt.includes('-') ? `${enumName}['${opt}']` : `${enumName}.${opt}` : opt).filter(opt => opt !== props[propName].defaultValue);\n\n        if (props[propName].defaultValue) {\n          opts.unshift(props[propName].defaultValue);\n        }\n\n        const row = `  \\${${ctr++}:${propName}={\\${${ctr++}|${opts.join(',')}|}\\\\}}`;\n        componentBody.push(row);\n      } else if (props[propName].type === PropTypes.String && typeof props[propName].value === PropTypes.String) {\n        const row = `  \\${${ctr++}:${propName}=\"\\${${ctr++}:${formatCode(props[propName].defaultValue || props[propName].value)}}\\\"}`;\n        componentBody.push(row);\n      } else {\n        const row = `  \\${${ctr++}:${propName}={\\${${ctr++}:${formatCode(props[propName].defaultValue || props[propName].value)}}\\\\}}`;\n        componentBody.push(row);\n      }\n    }\n\n    if (props['children'] && !props['children'].hidden) {\n      componentBody.push('>');\n      componentBody.push(`  \\${${ctr++}:${formatCode(props['children'].value)}}`);\n      componentBody.push(`</${componentName}>`);\n    } else {\n      componentBody.push(`/>`);\n    }\n  } else {\n    componentBody.push(`/>`);\n  }\n\n  return componentBody;\n};\n\nconst vscodeSnippet = ({\n  componentName,\n  prefix,\n  imports,\n  props,\n  description\n}) => {\n  const output = {};\n  const importBody = getImportBody(imports, props);\n\n  if (importBody.length > 0) {\n    output[`${componentName} import`] = {\n      scope: 'javascript,javascriptreact,typescript,typescriptreact',\n      prefix: [`${prefix || componentName} import`],\n      description: description || `Base ${componentName} import.`,\n      body: importBody\n    };\n  }\n\n  output[`${componentName}`] = {\n    scope: 'javascript,javascriptreact,typescript,typescriptreact',\n    prefix: [`${prefix || componentName} component`],\n    description: description || `Base ${componentName} component.`,\n    body: getComponentBody(componentName, props)\n  };\n  return output;\n};\n\nexport default vscodeSnippet;","map":{"version":3,"sources":["../../../src/snippets/vscode-snippet.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\nCopyright (c) 2020 Uber Technologies, Inc.\n\nThis source code is licensed under the MIT license found in the\nLICENSE file in the root directory of this source tree.\n*/\nimport { clone } from '../utils';\nimport { PropTypes, formatCode as rvFormatCode, } from '../';\nimport { addToImportList } from '../code-generator';\nconst formatCode = (code) => {\n    if (code && typeof code === 'string') {\n        const isJsx = code.startsWith('<');\n        try {\n            if (isJsx) {\n                code = rvFormatCode(`<>${code}</>`);\n            }\n            else {\n                code = rvFormatCode(`<>{${code}}</>`);\n            }\n            const addSpaces = !code.startsWith('<>\\n');\n            if (isJsx) {\n                code = code.replace(/^<>\\s*/, '').replace(/\\s*<\\/>$/, '');\n            }\n            else {\n                code = code.replace(/^<>\\s*\\{/, '').replace(/\\}\\s*<\\/>$/, '');\n            }\n            if (addSpaces) {\n                code = code.replace(/\\n/g, '\\n  ');\n            }\n        }\n        catch (e) { }\n        code = code.replace(/\\}/g, '\\\\}').replace(/\\$/g, '\\\\$');\n    }\n    return code;\n};\nconst joinNamed = (items, ctr) => {\n    if (!items)\n        return '';\n    let output = `\\${${ctr++}:{`;\n    for (let i = 0; i < items.length; i++) {\n        if (i !== items.length - 1) {\n            output += `\\${${ctr++}:${items[i]}, }`;\n        }\n        else {\n            output += `\\${${ctr++}:${items[i]}}`;\n        }\n    }\n    return `${output}\\\\}}`;\n};\nconst getImportBody = (imports, props) => {\n    const importList = imports ? clone(imports) : {};\n    // prop level imports (typically enums related) that are displayed\n    // only when the prop is being used\n    props &&\n        Object.values(props).forEach(prop => {\n            if (prop.imports) {\n                addToImportList(importList, prop.imports);\n            }\n        });\n    const importBody = [];\n    let ctr = 1;\n    for (const from in importList) {\n        const def = importList[from].default;\n        const named = Array.isArray(importList[from].named) &&\n            importList[from].named.length > 0\n            ? importList[from].named\n            : undefined;\n        const defaultImport = def ? `\\${${ctr++}:${def}${named ? ', }' : '}'}` : '';\n        importBody.push(`import ${defaultImport}${joinNamed(named, ctr)} from '${from}';`);\n        if (named) {\n            ctr += named.length + 1;\n        }\n    }\n    return importBody;\n};\nconst getComponentBody = (componentName, props) => {\n    let ctr = 1;\n    const componentBody = [`<${componentName}`];\n    if (props) {\n        for (const propName in props) {\n            if (props[propName].hidden)\n                continue;\n            if (propName === 'children')\n                continue;\n            if (props[propName].type === PropTypes.Boolean) {\n                const row = `  \\${${ctr++}:${propName}}`;\n                componentBody.push(row);\n            }\n            else if (props[propName].type === PropTypes.Enum) {\n                const enumName = props[propName].imports\n                    ? props[propName].enumName || propName.toUpperCase()\n                    : null;\n                const opts = Object.values(props[propName].options)\n                    .map((opt) => enumName\n                    ? opt.includes('-')\n                        ? `${enumName}['${opt}']`\n                        : `${enumName}.${opt}`\n                    : opt)\n                    .filter(opt => opt !== props[propName].defaultValue);\n                if (props[propName].defaultValue) {\n                    opts.unshift(props[propName].defaultValue);\n                }\n                const row = `  \\${${ctr++}:${propName}={\\${${ctr++}|${opts.join(',')}|}\\\\}}`;\n                componentBody.push(row);\n            }\n            else if (props[propName].type === PropTypes.String &&\n                typeof props[propName].value === PropTypes.String) {\n                const row = `  \\${${ctr++}:${propName}=\"\\${${ctr++}:${formatCode(props[propName].defaultValue || props[propName].value)}}\\\"}`;\n                componentBody.push(row);\n            }\n            else {\n                const row = `  \\${${ctr++}:${propName}={\\${${ctr++}:${formatCode(props[propName].defaultValue || props[propName].value)}}\\\\}}`;\n                componentBody.push(row);\n            }\n        }\n        if (props['children'] && !props['children'].hidden) {\n            componentBody.push('>');\n            componentBody.push(`  \\${${ctr++}:${formatCode(props['children'].value)}}`);\n            componentBody.push(`</${componentName}>`);\n        }\n        else {\n            componentBody.push(`/>`);\n        }\n    }\n    else {\n        componentBody.push(`/>`);\n    }\n    return componentBody;\n};\nconst vscodeSnippet = ({ componentName, prefix, imports, props, description, }) => {\n    const output = {};\n    const importBody = getImportBody(imports, props);\n    if (importBody.length > 0) {\n        output[`${componentName} import`] = {\n            scope: 'javascript,javascriptreact,typescript,typescriptreact',\n            prefix: [`${prefix || componentName} import`],\n            description: description || `Base ${componentName} import.`,\n            body: importBody,\n        };\n    }\n    output[`${componentName}`] = {\n        scope: 'javascript,javascriptreact,typescript,typescriptreact',\n        prefix: [`${prefix || componentName} component`],\n        description: description || `Base ${componentName} component.`,\n        body: getComponentBody(componentName, props),\n    };\n    return output;\n};\nexport default vscodeSnippet;\n//# sourceMappingURL=vscode-snippet.js.map"]},"metadata":{},"sourceType":"module"}