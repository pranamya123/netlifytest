{"ast":null,"code":"\"use strict\";\n\nvar _require$builders = require(\"../doc\").builders,\n    concat = _require$builders.concat,\n    hardline = _require$builders.hardline,\n    indent = _require$builders.indent,\n    join = _require$builders.join;\n\nvar preprocess = require(\"./preprocess\");\n\nfunction genericPrint(path, options, print) {\n  var node = path.getValue();\n\n  switch (node.type) {\n    case \"JsonRoot\":\n      return concat([path.call(print, \"node\"), hardline]);\n\n    case \"ArrayExpression\":\n      return node.elements.length === 0 ? \"[]\" : concat([\"[\", indent(concat([hardline, join(concat([\",\", hardline]), path.map(print, \"elements\"))])), hardline, \"]\"]);\n\n    case \"ObjectExpression\":\n      return node.properties.length === 0 ? \"{}\" : concat([\"{\", indent(concat([hardline, join(concat([\",\", hardline]), path.map(print, \"properties\"))])), hardline, \"}\"]);\n\n    case \"ObjectProperty\":\n      return concat([path.call(print, \"key\"), \": \", path.call(print, \"value\")]);\n\n    case \"UnaryExpression\":\n      return concat([node.operator === \"+\" ? \"\" : node.operator, path.call(print, \"argument\")]);\n\n    case \"NullLiteral\":\n      return \"null\";\n\n    case \"BooleanLiteral\":\n      return node.value ? \"true\" : \"false\";\n\n    case \"StringLiteral\":\n    case \"NumericLiteral\":\n      return JSON.stringify(node.value);\n\n    case \"Identifier\":\n      return JSON.stringify(node.name);\n\n    default:\n      /* istanbul ignore next */\n      throw new Error(\"unknown type: \" + JSON.stringify(node.type));\n  }\n}\n\nfunction clean(node, newNode\n/*, parent*/\n) {\n  delete newNode.start;\n  delete newNode.end;\n  delete newNode.extra;\n  delete newNode.loc;\n  delete newNode.comments;\n\n  if (node.type === \"Identifier\") {\n    return {\n      type: \"StringLiteral\",\n      value: node.name\n    };\n  }\n\n  if (node.type === \"UnaryExpression\" && node.operator === \"+\") {\n    return newNode.argument;\n  }\n}\n\nmodule.exports = {\n  preprocess: preprocess,\n  print: genericPrint,\n  massageAstNode: clean\n};","map":{"version":3,"sources":["/Users/pranamyavadlamani/Desktop/Research/PortFolio/portfolio-site/node_modules/@miksu/prettier/lib/language-js/printer-estree-json.js"],"names":["_require$builders","require","builders","concat","hardline","indent","join","preprocess","genericPrint","path","options","print","node","getValue","type","call","elements","length","map","properties","operator","value","JSON","stringify","name","Error","clean","newNode","start","end","extra","loc","comments","argument","module","exports","massageAstNode"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _require$builders = require(\"../doc\").builders,\n    concat = _require$builders.concat,\n    hardline = _require$builders.hardline,\n    indent = _require$builders.indent,\n    join = _require$builders.join;\n\nvar preprocess = require(\"./preprocess\");\n\nfunction genericPrint(path, options, print) {\n  var node = path.getValue();\n\n  switch (node.type) {\n    case \"JsonRoot\":\n      return concat([path.call(print, \"node\"), hardline]);\n\n    case \"ArrayExpression\":\n      return node.elements.length === 0 ? \"[]\" : concat([\"[\", indent(concat([hardline, join(concat([\",\", hardline]), path.map(print, \"elements\"))])), hardline, \"]\"]);\n\n    case \"ObjectExpression\":\n      return node.properties.length === 0 ? \"{}\" : concat([\"{\", indent(concat([hardline, join(concat([\",\", hardline]), path.map(print, \"properties\"))])), hardline, \"}\"]);\n\n    case \"ObjectProperty\":\n      return concat([path.call(print, \"key\"), \": \", path.call(print, \"value\")]);\n\n    case \"UnaryExpression\":\n      return concat([node.operator === \"+\" ? \"\" : node.operator, path.call(print, \"argument\")]);\n\n    case \"NullLiteral\":\n      return \"null\";\n\n    case \"BooleanLiteral\":\n      return node.value ? \"true\" : \"false\";\n\n    case \"StringLiteral\":\n    case \"NumericLiteral\":\n      return JSON.stringify(node.value);\n\n    case \"Identifier\":\n      return JSON.stringify(node.name);\n\n    default:\n      /* istanbul ignore next */\n      throw new Error(\"unknown type: \" + JSON.stringify(node.type));\n  }\n}\n\nfunction clean(node, newNode\n/*, parent*/\n) {\n  delete newNode.start;\n  delete newNode.end;\n  delete newNode.extra;\n  delete newNode.loc;\n  delete newNode.comments;\n\n  if (node.type === \"Identifier\") {\n    return {\n      type: \"StringLiteral\",\n      value: node.name\n    };\n  }\n\n  if (node.type === \"UnaryExpression\" && node.operator === \"+\") {\n    return newNode.argument;\n  }\n}\n\nmodule.exports = {\n  preprocess: preprocess,\n  print: genericPrint,\n  massageAstNode: clean\n};"]},"metadata":{},"sourceType":"script"}