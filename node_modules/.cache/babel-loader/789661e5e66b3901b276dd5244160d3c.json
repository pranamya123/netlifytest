{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.extract = extract;\nexports.strip = strip;\nexports.parse = parse;\nexports.parseWithComments = parseWithComments;\nexports.print = print;\n\nvar _detectNewline;\n\nfunction _load_detectNewline() {\n  return _detectNewline = _interopRequireDefault(require('detect-newline'));\n}\n\nvar _os;\n\nfunction _load_os() {\n  return _os = require('os');\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n */\n\n\nconst commentEndRe = /\\*\\/$/;\nconst commentStartRe = /^\\/\\*\\*/;\nconst docblockRe = /^\\s*(\\/\\*\\*?(.|\\r?\\n)*?\\*\\/)/;\nconst lineCommentRe = /(^|\\s+)\\/\\/([^\\r\\n]*)/g;\nconst ltrimNewlineRe = /^(\\r?\\n)+/;\nconst multilineRe = /(?:^|\\r?\\n) *(@[^\\r\\n]*?) *\\r?\\n *(?![^@\\r\\n]*\\/\\/[^]*)([^@\\r\\n\\s][^@\\r\\n]+?) *\\r?\\n/g;\nconst propertyRe = /(?:^|\\r?\\n) *@(\\S+) *([^\\r\\n]*)/g;\nconst stringStartRe = /(\\r?\\n|^) *\\* ?/g;\n\nfunction extract(contents) {\n  const match = contents.match(docblockRe);\n  return match ? match[0].trimLeft() : '';\n}\n\nfunction strip(contents) {\n  const match = contents.match(docblockRe);\n  return match && match[0] ? contents.substring(match[0].length) : contents;\n}\n\nfunction parse(docblock) {\n  return parseWithComments(docblock).pragmas;\n}\n\nfunction parseWithComments(docblock) {\n  const line = (0, (_detectNewline || _load_detectNewline()).default)(docblock) || (_os || _load_os()).EOL;\n\n  docblock = docblock.replace(commentStartRe, '').replace(commentEndRe, '').replace(stringStartRe, '$1'); // Normalize multi-line directives\n\n  let prev = '';\n\n  while (prev !== docblock) {\n    prev = docblock;\n    docblock = docblock.replace(multilineRe, `${line}$1 $2${line}`);\n  }\n\n  docblock = docblock.replace(ltrimNewlineRe, '').trimRight();\n  const result = Object.create(null);\n  const comments = docblock.replace(propertyRe, '').replace(ltrimNewlineRe, '').trimRight();\n  let match;\n\n  while (match = propertyRe.exec(docblock)) {\n    // strip linecomments from pragmas\n    const nextPragma = match[2].replace(lineCommentRe, '');\n\n    if (typeof result[match[1]] === 'string' || Array.isArray(result[match[1]])) {\n      result[match[1]] = [].concat(result[match[1]], nextPragma);\n    } else {\n      result[match[1]] = nextPragma;\n    }\n  }\n\n  return {\n    comments,\n    pragmas: result\n  };\n}\n\nfunction print(_ref) {\n  var _ref$comments = _ref.comments;\n  let comments = _ref$comments === undefined ? '' : _ref$comments;\n  var _ref$pragmas = _ref.pragmas;\n  let pragmas = _ref$pragmas === undefined ? {} : _ref$pragmas;\n\n  const line = (0, (_detectNewline || _load_detectNewline()).default)(comments) || (_os || _load_os()).EOL;\n\n  const head = '/**';\n  const start = ' *';\n  const tail = ' */';\n  const keys = Object.keys(pragmas);\n  const printedObject = keys.map(key => printKeyValues(key, pragmas[key])).reduce((arr, next) => arr.concat(next), []).map(keyValue => start + ' ' + keyValue + line).join('');\n\n  if (!comments) {\n    if (keys.length === 0) {\n      return '';\n    }\n\n    if (keys.length === 1 && !Array.isArray(pragmas[keys[0]])) {\n      const value = pragmas[keys[0]];\n      return `${head} ${printKeyValues(keys[0], value)[0]}${tail}`;\n    }\n  }\n\n  const printedComments = comments.split(line).map(textLine => `${start} ${textLine}`).join(line) + line;\n  return head + line + (comments ? printedComments : '') + (comments && keys.length ? start + line : '') + printedObject + tail;\n}\n\nfunction printKeyValues(key, valueOrArray) {\n  return [].concat(valueOrArray).map(value => `@${key} ${value}`.trim());\n}","map":{"version":3,"sources":["/Users/pranamyavadlamani/Desktop/Research/PortFolio/portfolio-site/node_modules/@miksu/prettier/node_modules/jest-docblock/build/index.js"],"names":["Object","defineProperty","exports","value","extract","strip","parse","parseWithComments","print","_detectNewline","_load_detectNewline","_interopRequireDefault","require","_os","_load_os","obj","__esModule","default","commentEndRe","commentStartRe","docblockRe","lineCommentRe","ltrimNewlineRe","multilineRe","propertyRe","stringStartRe","contents","match","trimLeft","substring","length","docblock","pragmas","line","EOL","replace","prev","trimRight","result","create","comments","exec","nextPragma","Array","isArray","concat","_ref","_ref$comments","undefined","_ref$pragmas","head","start","tail","keys","printedObject","map","key","printKeyValues","reduce","arr","next","keyValue","join","printedComments","split","textLine","valueOrArray","trim"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.extract = extract;\nexports.strip = strip;\nexports.parse = parse;\nexports.parseWithComments = parseWithComments;\nexports.print = print;\n\nvar _detectNewline;\n\nfunction _load_detectNewline() {\n  return (_detectNewline = _interopRequireDefault(require('detect-newline')));\n}\n\nvar _os;\n\nfunction _load_os() {\n  return (_os = require('os'));\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\n/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n */\n\nconst commentEndRe = /\\*\\/$/;\nconst commentStartRe = /^\\/\\*\\*/;\nconst docblockRe = /^\\s*(\\/\\*\\*?(.|\\r?\\n)*?\\*\\/)/;\nconst lineCommentRe = /(^|\\s+)\\/\\/([^\\r\\n]*)/g;\nconst ltrimNewlineRe = /^(\\r?\\n)+/;\nconst multilineRe = /(?:^|\\r?\\n) *(@[^\\r\\n]*?) *\\r?\\n *(?![^@\\r\\n]*\\/\\/[^]*)([^@\\r\\n\\s][^@\\r\\n]+?) *\\r?\\n/g;\nconst propertyRe = /(?:^|\\r?\\n) *@(\\S+) *([^\\r\\n]*)/g;\nconst stringStartRe = /(\\r?\\n|^) *\\* ?/g;\n\nfunction extract(contents) {\n  const match = contents.match(docblockRe);\n  return match ? match[0].trimLeft() : '';\n}\n\nfunction strip(contents) {\n  const match = contents.match(docblockRe);\n  return match && match[0] ? contents.substring(match[0].length) : contents;\n}\n\nfunction parse(docblock) {\n  return parseWithComments(docblock).pragmas;\n}\n\nfunction parseWithComments(docblock) {\n  const line =\n    (0, (_detectNewline || _load_detectNewline()).default)(docblock) ||\n    (_os || _load_os()).EOL;\n\n  docblock = docblock\n    .replace(commentStartRe, '')\n    .replace(commentEndRe, '')\n    .replace(stringStartRe, '$1');\n\n  // Normalize multi-line directives\n  let prev = '';\n  while (prev !== docblock) {\n    prev = docblock;\n    docblock = docblock.replace(multilineRe, `${line}$1 $2${line}`);\n  }\n  docblock = docblock.replace(ltrimNewlineRe, '').trimRight();\n\n  const result = Object.create(null);\n  const comments = docblock\n    .replace(propertyRe, '')\n    .replace(ltrimNewlineRe, '')\n    .trimRight();\n\n  let match;\n  while ((match = propertyRe.exec(docblock))) {\n    // strip linecomments from pragmas\n    const nextPragma = match[2].replace(lineCommentRe, '');\n    if (\n      typeof result[match[1]] === 'string' ||\n      Array.isArray(result[match[1]])\n    ) {\n      result[match[1]] = [].concat(result[match[1]], nextPragma);\n    } else {\n      result[match[1]] = nextPragma;\n    }\n  }\n  return {comments, pragmas: result};\n}\n\nfunction print(_ref) {\n  var _ref$comments = _ref.comments;\n  let comments = _ref$comments === undefined ? '' : _ref$comments;\n  var _ref$pragmas = _ref.pragmas;\n  let pragmas = _ref$pragmas === undefined ? {} : _ref$pragmas;\n\n  const line =\n    (0, (_detectNewline || _load_detectNewline()).default)(comments) ||\n    (_os || _load_os()).EOL;\n  const head = '/**';\n  const start = ' *';\n  const tail = ' */';\n\n  const keys = Object.keys(pragmas);\n\n  const printedObject = keys\n    .map(key => printKeyValues(key, pragmas[key]))\n    .reduce((arr, next) => arr.concat(next), [])\n    .map(keyValue => start + ' ' + keyValue + line)\n    .join('');\n\n  if (!comments) {\n    if (keys.length === 0) {\n      return '';\n    }\n    if (keys.length === 1 && !Array.isArray(pragmas[keys[0]])) {\n      const value = pragmas[keys[0]];\n      return `${head} ${printKeyValues(keys[0], value)[0]}${tail}`;\n    }\n  }\n\n  const printedComments =\n    comments\n      .split(line)\n      .map(textLine => `${start} ${textLine}`)\n      .join(line) + line;\n\n  return (\n    head +\n    line +\n    (comments ? printedComments : '') +\n    (comments && keys.length ? start + line : '') +\n    printedObject +\n    tail\n  );\n}\n\nfunction printKeyValues(key, valueOrArray) {\n  return [].concat(valueOrArray).map(value => `@${key} ${value}`.trim());\n}\n"]},"metadata":{},"sourceType":"script"}