{"ast":null,"code":"/*\nCopyright (c) 2020 Uber Technologies, Inc.\n\nThis source code is licensed under the MIT license found in the\nLICENSE file in the root directory of this source tree.\n*/\nimport { useState, useReducer, useEffect } from 'react';\nimport copy from 'copy-to-clipboard';\nimport debounce from 'lodash/debounce'; // transformations, code generation\n\nimport { transformBeforeCompilation } from './ast';\nimport { getCode, formatCode } from './code-generator';\nimport { buildPropsObj } from './utils'; // actions that can be dispatched\n\nimport { reset, updateAll, updateCode, updateCodeAndProvider, updateProps, updatePropsAndCode, updatePropsAndCodeNoRecompile } from './actions';\nimport reducer from './reducer';\n\nconst useView = (config = {}) => {\n  // setting defaults\n  const componentName = config.componentName ? config.componentName : '';\n  const propsConfig = config.props ? config.props : {};\n  const scopeConfig = config.scope ? config.scope : {};\n  const importsConfig = config.imports ? config.imports : {};\n  const provider = config.provider ? config.provider : {\n    value: undefined,\n    parse: () => undefined,\n    generate: (_, child) => child,\n    imports: {}\n  };\n  const onUpdate = config.onUpdate ? config.onUpdate : () => {};\n  const customProps = config.customProps ? config.customProps : {};\n  const initialCode = config.initialCode;\n  const [hydrated, setHydrated] = useState(false);\n  const [error, setError] = useState({\n    where: '',\n    msg: null\n  });\n  const [state, dispatch] = useReducer(reducer, {\n    code: initialCode || getCode({\n      props: propsConfig,\n      componentName,\n      provider,\n      providerValue: provider.value,\n      importsConfig,\n      customProps\n    }),\n    codeNoRecompile: '',\n    props: propsConfig,\n    providerValue: provider ? provider.value : undefined\n  }); // initialize from the initialCode\n\n  useEffect(() => {\n    if (initialCode && !hydrated) {\n      setHydrated(true);\n\n      try {\n        updateAll(dispatch, initialCode, componentName, propsConfig, provider ? provider.parse : undefined, customProps);\n      } catch (e) {}\n    }\n  }, [initialCode]); // this callback is secretely inserted into props marked with\n  // \"propHook\" this way we can get notified when the internal\n  // state of previewed component is changed by user\n\n  const __reactViewOnChange = debounce((propValue, propName) => {\n    !hydrated && setHydrated(true);\n    const newCode = getCode({\n      props: buildPropsObj(state.props, {\n        [propName]: propValue\n      }),\n      componentName,\n      provider,\n      providerValue: state.providerValue,\n      importsConfig,\n      customProps\n    });\n    updatePropsAndCodeNoRecompile(dispatch, newCode, propName, propValue);\n    onUpdate({\n      code: newCode\n    });\n  }, 200);\n\n  return {\n    compilerProps: {\n      code: state.code,\n      setError: msg => setError({\n        where: '__compiler',\n        msg\n      }),\n      transformations: [ast => transformBeforeCompilation(ast, componentName, propsConfig)],\n      scope: Object.assign(Object.assign({}, scopeConfig), {\n        __reactViewOnChange\n      })\n    },\n    knobProps: {\n      state: state.props,\n      error,\n      set: (propValue, propName) => {\n        try {\n          !hydrated && setHydrated(true);\n          const newCode = getCode({\n            props: buildPropsObj(state.props, {\n              [propName]: propValue\n            }),\n            componentName,\n            provider,\n            providerValue: state.providerValue,\n            importsConfig,\n            customProps\n          });\n          setError({\n            where: '',\n            msg: null\n          });\n\n          if (state.codeNoRecompile !== '') {\n            // fixes https://github.com/uber/react-view/issues/19\n            // We don't run compiler when the state change comes from interacting\n            // with the component since that causes remount and lost of focus.\n            // That's a bad experience for interactions like typing. But, we\n            // still want to display correct code snippet. That's why we have\n            // a separate state.codeNoRecompile. The problem is that compiler runs\n            // only if state.code changes and that doesn't really happen in the modal\n            // case since we are only flipping a boolean flag. So state.code stays same\n            // each even cycle of \"open the modal through the knob and close it by its button\".\n            // so here we need to force an addition state.code update (aka recompile\n            // with show=false\n            updateCode(dispatch, state.codeNoRecompile); // and now we need to do the sequential state.code update with show=true\n            // in the next tick\n\n            setTimeout(() => {\n              updatePropsAndCode(dispatch, newCode, propName, propValue);\n              onUpdate({\n                code: newCode\n              });\n            }, 0);\n          } else {\n            updatePropsAndCode(dispatch, newCode, propName, propValue);\n            onUpdate({\n              code: newCode\n            });\n          }\n        } catch (e) {\n          updateProps(dispatch, propName, propValue);\n          setError({\n            where: propName,\n            msg: e.toString()\n          });\n        }\n      }\n    },\n    providerValue: state.providerValue,\n    editorProps: {\n      code: state.codeNoRecompile !== '' ? state.codeNoRecompile : state.code,\n      onChange: newCode => {\n        try {\n          updateAll(dispatch, newCode, componentName, propsConfig, provider ? provider.parse : undefined, customProps);\n          onUpdate({\n            code: newCode\n          });\n        } catch (e) {\n          updateCode(dispatch, newCode);\n        }\n      }\n    },\n    errorProps: {\n      msg: error.where === '__compiler' ? error.msg : null,\n      code: state.code\n    },\n    actions: {\n      formatCode: () => {\n        updateCode(dispatch, formatCode(state.code));\n      },\n      copyCode: () => {\n        copy(state.code);\n      },\n      copyUrl: () => {\n        copy(window.location.href);\n      },\n      reset: () => {\n        const editorOnlyMode = Object.keys(propsConfig).length === 0;\n        const providerValue = provider ? provider.value : undefined;\n        const newCode = editorOnlyMode ? initialCode : getCode({\n          props: propsConfig,\n          componentName,\n          provider,\n          providerValue,\n          importsConfig,\n          customProps\n        });\n        reset(dispatch, newCode, providerValue, propsConfig);\n        onUpdate({\n          code: newCode\n        });\n      },\n      updateProvider: providerValue => {\n        const newCode = getCode({\n          props: buildPropsObj(state.props, {}),\n          componentName,\n          provider,\n          providerValue,\n          importsConfig,\n          customProps\n        });\n        updateCodeAndProvider(dispatch, newCode, providerValue);\n      },\n      updateProp: (propName, propValue) => {\n        try {\n          const newCode = getCode({\n            props: buildPropsObj(state.props, {\n              [propName]: propValue\n            }),\n            componentName,\n            provider,\n            providerValue: state.providerValue,\n            importsConfig,\n            customProps\n          });\n          setError({\n            where: '',\n            msg: null\n          });\n          updatePropsAndCode(dispatch, newCode, propName, propValue);\n        } catch (e) {\n          updateProps(dispatch, propName, propValue);\n          setError({\n            where: propName,\n            msg: e.toString()\n          });\n        }\n      }\n    }\n  };\n};\n\nexport default useView;","map":{"version":3,"sources":["../../src/use-view.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\nCopyright (c) 2020 Uber Technologies, Inc.\n\nThis source code is licensed under the MIT license found in the\nLICENSE file in the root directory of this source tree.\n*/\nimport { useState, useReducer, useEffect } from 'react';\nimport copy from 'copy-to-clipboard';\nimport debounce from 'lodash/debounce';\n// transformations, code generation\nimport { transformBeforeCompilation } from './ast';\nimport { getCode, formatCode } from './code-generator';\nimport { buildPropsObj } from './utils';\n// actions that can be dispatched\nimport { reset, updateAll, updateCode, updateCodeAndProvider, updateProps, updatePropsAndCode, updatePropsAndCodeNoRecompile, } from './actions';\nimport reducer from './reducer';\nconst useView = (config = {}) => {\n    // setting defaults\n    const componentName = config.componentName ? config.componentName : '';\n    const propsConfig = config.props ? config.props : {};\n    const scopeConfig = config.scope ? config.scope : {};\n    const importsConfig = config.imports ? config.imports : {};\n    const provider = config.provider\n        ? config.provider\n        : {\n            value: undefined,\n            parse: () => undefined,\n            generate: (_, child) => child,\n            imports: {},\n        };\n    const onUpdate = config.onUpdate ? config.onUpdate : () => { };\n    const customProps = config.customProps ? config.customProps : {};\n    const initialCode = config.initialCode;\n    const [hydrated, setHydrated] = useState(false);\n    const [error, setError] = useState({ where: '', msg: null });\n    const [state, dispatch] = useReducer(reducer, {\n        code: initialCode ||\n            getCode({\n                props: propsConfig,\n                componentName,\n                provider,\n                providerValue: provider.value,\n                importsConfig,\n                customProps,\n            }),\n        codeNoRecompile: '',\n        props: propsConfig,\n        providerValue: provider ? provider.value : undefined,\n    });\n    // initialize from the initialCode\n    useEffect(() => {\n        if (initialCode && !hydrated) {\n            setHydrated(true);\n            try {\n                updateAll(dispatch, initialCode, componentName, propsConfig, provider ? provider.parse : undefined, customProps);\n            }\n            catch (e) { }\n        }\n    }, [initialCode]);\n    // this callback is secretely inserted into props marked with\n    // \"propHook\" this way we can get notified when the internal\n    // state of previewed component is changed by user\n    const __reactViewOnChange = debounce((propValue, propName) => {\n        !hydrated && setHydrated(true);\n        const newCode = getCode({\n            props: buildPropsObj(state.props, { [propName]: propValue }),\n            componentName,\n            provider,\n            providerValue: state.providerValue,\n            importsConfig,\n            customProps,\n        });\n        updatePropsAndCodeNoRecompile(dispatch, newCode, propName, propValue);\n        onUpdate({ code: newCode });\n    }, 200);\n    return {\n        compilerProps: {\n            code: state.code,\n            setError: (msg) => setError({ where: '__compiler', msg }),\n            transformations: [\n                (ast) => transformBeforeCompilation(ast, componentName, propsConfig),\n            ],\n            scope: Object.assign(Object.assign({}, scopeConfig), { __reactViewOnChange }),\n        },\n        knobProps: {\n            state: state.props,\n            error,\n            set: (propValue, propName) => {\n                try {\n                    !hydrated && setHydrated(true);\n                    const newCode = getCode({\n                        props: buildPropsObj(state.props, { [propName]: propValue }),\n                        componentName,\n                        provider,\n                        providerValue: state.providerValue,\n                        importsConfig,\n                        customProps,\n                    });\n                    setError({ where: '', msg: null });\n                    if (state.codeNoRecompile !== '') {\n                        // fixes https://github.com/uber/react-view/issues/19\n                        // We don't run compiler when the state change comes from interacting\n                        // with the component since that causes remount and lost of focus.\n                        // That's a bad experience for interactions like typing. But, we\n                        // still want to display correct code snippet. That's why we have\n                        // a separate state.codeNoRecompile. The problem is that compiler runs\n                        // only if state.code changes and that doesn't really happen in the modal\n                        // case since we are only flipping a boolean flag. So state.code stays same\n                        // each even cycle of \"open the modal through the knob and close it by its button\".\n                        // so here we need to force an addition state.code update (aka recompile\n                        // with show=false\n                        updateCode(dispatch, state.codeNoRecompile);\n                        // and now we need to do the sequential state.code update with show=true\n                        // in the next tick\n                        setTimeout(() => {\n                            updatePropsAndCode(dispatch, newCode, propName, propValue);\n                            onUpdate({ code: newCode });\n                        }, 0);\n                    }\n                    else {\n                        updatePropsAndCode(dispatch, newCode, propName, propValue);\n                        onUpdate({ code: newCode });\n                    }\n                }\n                catch (e) {\n                    updateProps(dispatch, propName, propValue);\n                    setError({ where: propName, msg: e.toString() });\n                }\n            },\n        },\n        providerValue: state.providerValue,\n        editorProps: {\n            code: state.codeNoRecompile !== '' ? state.codeNoRecompile : state.code,\n            onChange: (newCode) => {\n                try {\n                    updateAll(dispatch, newCode, componentName, propsConfig, provider ? provider.parse : undefined, customProps);\n                    onUpdate({ code: newCode });\n                }\n                catch (e) {\n                    updateCode(dispatch, newCode);\n                }\n            },\n        },\n        errorProps: {\n            msg: error.where === '__compiler' ? error.msg : null,\n            code: state.code,\n        },\n        actions: {\n            formatCode: () => {\n                updateCode(dispatch, formatCode(state.code));\n            },\n            copyCode: () => {\n                copy(state.code);\n            },\n            copyUrl: () => {\n                copy(window.location.href);\n            },\n            reset: () => {\n                const editorOnlyMode = Object.keys(propsConfig).length === 0;\n                const providerValue = provider ? provider.value : undefined;\n                const newCode = editorOnlyMode\n                    ? initialCode\n                    : getCode({\n                        props: propsConfig,\n                        componentName,\n                        provider,\n                        providerValue,\n                        importsConfig,\n                        customProps,\n                    });\n                reset(dispatch, newCode, providerValue, propsConfig);\n                onUpdate({ code: newCode });\n            },\n            updateProvider: (providerValue) => {\n                const newCode = getCode({\n                    props: buildPropsObj(state.props, {}),\n                    componentName,\n                    provider,\n                    providerValue,\n                    importsConfig,\n                    customProps,\n                });\n                updateCodeAndProvider(dispatch, newCode, providerValue);\n            },\n            updateProp: (propName, propValue) => {\n                try {\n                    const newCode = getCode({\n                        props: buildPropsObj(state.props, { [propName]: propValue }),\n                        componentName,\n                        provider,\n                        providerValue: state.providerValue,\n                        importsConfig,\n                        customProps,\n                    });\n                    setError({ where: '', msg: null });\n                    updatePropsAndCode(dispatch, newCode, propName, propValue);\n                }\n                catch (e) {\n                    updateProps(dispatch, propName, propValue);\n                    setError({ where: propName, msg: e.toString() });\n                }\n            },\n        },\n    };\n};\nexport default useView;\n//# sourceMappingURL=use-view.js.map"]},"metadata":{},"sourceType":"module"}