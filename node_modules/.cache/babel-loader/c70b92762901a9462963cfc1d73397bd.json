{"ast":null,"code":"'use strict';\n\nconst escapeStringRegexp = require('escape-string-regexp');\n\nconst ansiStyles = require('ansi-styles');\n\nconst supportsColor = require('supports-color');\n\nconst template = require('./templates.js');\n\nconst isSimpleWindowsTerm = process.platform === 'win32' && !(process.env.TERM || '').toLowerCase().startsWith('xterm'); // `supportsColor.level` â†’ `ansiStyles.color[name]` mapping\n\nconst levelMapping = ['ansi', 'ansi', 'ansi256', 'ansi16m']; // `color-convert` models to exclude from the Chalk API due to conflicts and such\n\nconst skipModels = new Set(['gray']);\nconst styles = Object.create(null);\n\nfunction applyOptions(obj, options) {\n  options = options || {}; // Detect level if not set manually\n\n  const scLevel = supportsColor ? supportsColor.level : 0;\n  obj.level = options.level === undefined ? scLevel : options.level;\n  obj.enabled = 'enabled' in options ? options.enabled : obj.level > 0;\n}\n\nfunction Chalk(options) {\n  // We check for this.template here since calling `chalk.constructor()`\n  // by itself will have a `this` of a previously constructed chalk object\n  if (!this || !(this instanceof Chalk) || this.template) {\n    const chalk = {};\n    applyOptions(chalk, options);\n\n    chalk.template = function () {\n      const args = [].slice.call(arguments);\n      return chalkTag.apply(null, [chalk.template].concat(args));\n    };\n\n    Object.setPrototypeOf(chalk, Chalk.prototype);\n    Object.setPrototypeOf(chalk.template, chalk);\n    chalk.template.constructor = Chalk;\n    return chalk.template;\n  }\n\n  applyOptions(this, options);\n} // Use bright blue on Windows as the normal blue color is illegible\n\n\nif (isSimpleWindowsTerm) {\n  ansiStyles.blue.open = '\\u001B[94m';\n}\n\nfor (const key of Object.keys(ansiStyles)) {\n  ansiStyles[key].closeRe = new RegExp(escapeStringRegexp(ansiStyles[key].close), 'g');\n  styles[key] = {\n    get() {\n      const codes = ansiStyles[key];\n      return build.call(this, this._styles ? this._styles.concat(codes) : [codes], key);\n    }\n\n  };\n}\n\nansiStyles.color.closeRe = new RegExp(escapeStringRegexp(ansiStyles.color.close), 'g');\n\nfor (const model of Object.keys(ansiStyles.color.ansi)) {\n  if (skipModels.has(model)) {\n    continue;\n  }\n\n  styles[model] = {\n    get() {\n      const level = this.level;\n      return function () {\n        const open = ansiStyles.color[levelMapping[level]][model].apply(null, arguments);\n        const codes = {\n          open,\n          close: ansiStyles.color.close,\n          closeRe: ansiStyles.color.closeRe\n        };\n        return build.call(this, this._styles ? this._styles.concat(codes) : [codes], model);\n      };\n    }\n\n  };\n}\n\nansiStyles.bgColor.closeRe = new RegExp(escapeStringRegexp(ansiStyles.bgColor.close), 'g');\n\nfor (const model of Object.keys(ansiStyles.bgColor.ansi)) {\n  if (skipModels.has(model)) {\n    continue;\n  }\n\n  const bgModel = 'bg' + model[0].toUpperCase() + model.slice(1);\n  styles[bgModel] = {\n    get() {\n      const level = this.level;\n      return function () {\n        const open = ansiStyles.bgColor[levelMapping[level]][model].apply(null, arguments);\n        const codes = {\n          open,\n          close: ansiStyles.bgColor.close,\n          closeRe: ansiStyles.bgColor.closeRe\n        };\n        return build.call(this, this._styles ? this._styles.concat(codes) : [codes], model);\n      };\n    }\n\n  };\n}\n\nconst proto = Object.defineProperties(() => {}, styles);\n\nfunction build(_styles, key) {\n  const builder = function () {\n    return applyStyle.apply(builder, arguments);\n  };\n\n  builder._styles = _styles;\n  const self = this;\n  Object.defineProperty(builder, 'level', {\n    enumerable: true,\n\n    get() {\n      return self.level;\n    },\n\n    set(level) {\n      self.level = level;\n    }\n\n  });\n  Object.defineProperty(builder, 'enabled', {\n    enumerable: true,\n\n    get() {\n      return self.enabled;\n    },\n\n    set(enabled) {\n      self.enabled = enabled;\n    }\n\n  }); // See below for fix regarding invisible grey/dim combination on Windows\n\n  builder.hasGrey = this.hasGrey || key === 'gray' || key === 'grey'; // `__proto__` is used because we must return a function, but there is\n  // no way to create a function with a different prototype\n\n  builder.__proto__ = proto; // eslint-disable-line no-proto\n\n  return builder;\n}\n\nfunction applyStyle() {\n  // Support varags, but simply cast to string in case there's only one arg\n  const args = arguments;\n  const argsLen = args.length;\n  let str = String(arguments[0]);\n\n  if (argsLen === 0) {\n    return '';\n  }\n\n  if (argsLen > 1) {\n    // Don't slice `arguments`, it prevents V8 optimizations\n    for (let a = 1; a < argsLen; a++) {\n      str += ' ' + args[a];\n    }\n  }\n\n  if (!this.enabled || this.level <= 0 || !str) {\n    return str;\n  } // Turns out that on Windows dimmed gray text becomes invisible in cmd.exe,\n  // see https://github.com/chalk/chalk/issues/58\n  // If we're on Windows and we're dealing with a gray color, temporarily make 'dim' a noop.\n\n\n  const originalDim = ansiStyles.dim.open;\n\n  if (isSimpleWindowsTerm && this.hasGrey) {\n    ansiStyles.dim.open = '';\n  }\n\n  for (const code of this._styles.slice().reverse()) {\n    // Replace any instances already present with a re-opening code\n    // otherwise only the part of the string until said closing code\n    // will be colored, and the rest will simply be 'plain'.\n    str = code.open + str.replace(code.closeRe, code.open) + code.close; // Close the styling before a linebreak and reopen\n    // after next line to fix a bleed issue on macOS\n    // https://github.com/chalk/chalk/pull/92\n\n    str = str.replace(/\\r?\\n/g, `${code.close}$&${code.open}`);\n  } // Reset the original `dim` if we changed it to work around the Windows dimmed gray issue\n\n\n  ansiStyles.dim.open = originalDim;\n  return str;\n}\n\nfunction chalkTag(chalk, strings) {\n  if (!Array.isArray(strings)) {\n    // If chalk() was called by itself or with a string,\n    // return the string itself as a string.\n    return [].slice.call(arguments, 1).join(' ');\n  }\n\n  const args = [].slice.call(arguments, 2);\n  const parts = [strings.raw[0]];\n\n  for (let i = 1; i < strings.length; i++) {\n    parts.push(String(args[i - 1]).replace(/[{}\\\\]/g, '\\\\$&'));\n    parts.push(String(strings.raw[i]));\n  }\n\n  return template(chalk, parts.join(''));\n}\n\nObject.defineProperties(Chalk.prototype, styles);\nmodule.exports = Chalk(); // eslint-disable-line new-cap\n\nmodule.exports.supportsColor = supportsColor;","map":{"version":3,"sources":["/Users/pranamyavadlamani/Desktop/Research/PortFolio/portfolio-site/node_modules/@miksu/prettier/node_modules/chalk/index.js"],"names":["escapeStringRegexp","require","ansiStyles","supportsColor","template","isSimpleWindowsTerm","process","platform","env","TERM","toLowerCase","startsWith","levelMapping","skipModels","Set","styles","Object","create","applyOptions","obj","options","scLevel","level","undefined","enabled","Chalk","chalk","args","slice","call","arguments","chalkTag","apply","concat","setPrototypeOf","prototype","constructor","blue","open","key","keys","closeRe","RegExp","close","get","codes","build","_styles","color","model","ansi","has","bgColor","bgModel","toUpperCase","proto","defineProperties","builder","applyStyle","self","defineProperty","enumerable","set","hasGrey","__proto__","argsLen","length","str","String","a","originalDim","dim","code","reverse","replace","strings","Array","isArray","join","parts","raw","i","push","module","exports"],"mappings":"AAAA;;AACA,MAAMA,kBAAkB,GAAGC,OAAO,CAAC,sBAAD,CAAlC;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAD,CAA1B;;AACA,MAAME,aAAa,GAAGF,OAAO,CAAC,gBAAD,CAA7B;;AAEA,MAAMG,QAAQ,GAAGH,OAAO,CAAC,gBAAD,CAAxB;;AAEA,MAAMI,mBAAmB,GAAGC,OAAO,CAACC,QAAR,KAAqB,OAArB,IAAgC,CAAC,CAACD,OAAO,CAACE,GAAR,CAAYC,IAAZ,IAAoB,EAArB,EAAyBC,WAAzB,GAAuCC,UAAvC,CAAkD,OAAlD,CAA7D,C,CAEA;;AACA,MAAMC,YAAY,GAAG,CAAC,MAAD,EAAS,MAAT,EAAiB,SAAjB,EAA4B,SAA5B,CAArB,C,CAEA;;AACA,MAAMC,UAAU,GAAG,IAAIC,GAAJ,CAAQ,CAAC,MAAD,CAAR,CAAnB;AAEA,MAAMC,MAAM,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAf;;AAEA,SAASC,YAAT,CAAsBC,GAAtB,EAA2BC,OAA3B,EAAoC;AACnCA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB,CADmC,CAGnC;;AACA,QAAMC,OAAO,GAAGlB,aAAa,GAAGA,aAAa,CAACmB,KAAjB,GAAyB,CAAtD;AACAH,EAAAA,GAAG,CAACG,KAAJ,GAAYF,OAAO,CAACE,KAAR,KAAkBC,SAAlB,GAA8BF,OAA9B,GAAwCD,OAAO,CAACE,KAA5D;AACAH,EAAAA,GAAG,CAACK,OAAJ,GAAc,aAAaJ,OAAb,GAAuBA,OAAO,CAACI,OAA/B,GAAyCL,GAAG,CAACG,KAAJ,GAAY,CAAnE;AACA;;AAED,SAASG,KAAT,CAAeL,OAAf,EAAwB;AACvB;AACA;AACA,MAAI,CAAC,IAAD,IAAS,EAAE,gBAAgBK,KAAlB,CAAT,IAAqC,KAAKrB,QAA9C,EAAwD;AACvD,UAAMsB,KAAK,GAAG,EAAd;AACAR,IAAAA,YAAY,CAACQ,KAAD,EAAQN,OAAR,CAAZ;;AAEAM,IAAAA,KAAK,CAACtB,QAAN,GAAiB,YAAY;AAC5B,YAAMuB,IAAI,GAAG,GAAGC,KAAH,CAASC,IAAT,CAAcC,SAAd,CAAb;AACA,aAAOC,QAAQ,CAACC,KAAT,CAAe,IAAf,EAAqB,CAACN,KAAK,CAACtB,QAAP,EAAiB6B,MAAjB,CAAwBN,IAAxB,CAArB,CAAP;AACA,KAHD;;AAKAX,IAAAA,MAAM,CAACkB,cAAP,CAAsBR,KAAtB,EAA6BD,KAAK,CAACU,SAAnC;AACAnB,IAAAA,MAAM,CAACkB,cAAP,CAAsBR,KAAK,CAACtB,QAA5B,EAAsCsB,KAAtC;AAEAA,IAAAA,KAAK,CAACtB,QAAN,CAAegC,WAAf,GAA6BX,KAA7B;AAEA,WAAOC,KAAK,CAACtB,QAAb;AACA;;AAEDc,EAAAA,YAAY,CAAC,IAAD,EAAOE,OAAP,CAAZ;AACA,C,CAED;;;AACA,IAAIf,mBAAJ,EAAyB;AACxBH,EAAAA,UAAU,CAACmC,IAAX,CAAgBC,IAAhB,GAAuB,YAAvB;AACA;;AAED,KAAK,MAAMC,GAAX,IAAkBvB,MAAM,CAACwB,IAAP,CAAYtC,UAAZ,CAAlB,EAA2C;AAC1CA,EAAAA,UAAU,CAACqC,GAAD,CAAV,CAAgBE,OAAhB,GAA0B,IAAIC,MAAJ,CAAW1C,kBAAkB,CAACE,UAAU,CAACqC,GAAD,CAAV,CAAgBI,KAAjB,CAA7B,EAAsD,GAAtD,CAA1B;AAEA5B,EAAAA,MAAM,CAACwB,GAAD,CAAN,GAAc;AACbK,IAAAA,GAAG,GAAG;AACL,YAAMC,KAAK,GAAG3C,UAAU,CAACqC,GAAD,CAAxB;AACA,aAAOO,KAAK,CAACjB,IAAN,CAAW,IAAX,EAAiB,KAAKkB,OAAL,GAAe,KAAKA,OAAL,CAAad,MAAb,CAAoBY,KAApB,CAAf,GAA4C,CAACA,KAAD,CAA7D,EAAsEN,GAAtE,CAAP;AACA;;AAJY,GAAd;AAMA;;AAEDrC,UAAU,CAAC8C,KAAX,CAAiBP,OAAjB,GAA2B,IAAIC,MAAJ,CAAW1C,kBAAkB,CAACE,UAAU,CAAC8C,KAAX,CAAiBL,KAAlB,CAA7B,EAAuD,GAAvD,CAA3B;;AACA,KAAK,MAAMM,KAAX,IAAoBjC,MAAM,CAACwB,IAAP,CAAYtC,UAAU,CAAC8C,KAAX,CAAiBE,IAA7B,CAApB,EAAwD;AACvD,MAAIrC,UAAU,CAACsC,GAAX,CAAeF,KAAf,CAAJ,EAA2B;AAC1B;AACA;;AAEDlC,EAAAA,MAAM,CAACkC,KAAD,CAAN,GAAgB;AACfL,IAAAA,GAAG,GAAG;AACL,YAAMtB,KAAK,GAAG,KAAKA,KAAnB;AACA,aAAO,YAAY;AAClB,cAAMgB,IAAI,GAAGpC,UAAU,CAAC8C,KAAX,CAAiBpC,YAAY,CAACU,KAAD,CAA7B,EAAsC2B,KAAtC,EAA6CjB,KAA7C,CAAmD,IAAnD,EAAyDF,SAAzD,CAAb;AACA,cAAMe,KAAK,GAAG;AACbP,UAAAA,IADa;AAEbK,UAAAA,KAAK,EAAEzC,UAAU,CAAC8C,KAAX,CAAiBL,KAFX;AAGbF,UAAAA,OAAO,EAAEvC,UAAU,CAAC8C,KAAX,CAAiBP;AAHb,SAAd;AAKA,eAAOK,KAAK,CAACjB,IAAN,CAAW,IAAX,EAAiB,KAAKkB,OAAL,GAAe,KAAKA,OAAL,CAAad,MAAb,CAAoBY,KAApB,CAAf,GAA4C,CAACA,KAAD,CAA7D,EAAsEI,KAAtE,CAAP;AACA,OARD;AASA;;AAZc,GAAhB;AAcA;;AAED/C,UAAU,CAACkD,OAAX,CAAmBX,OAAnB,GAA6B,IAAIC,MAAJ,CAAW1C,kBAAkB,CAACE,UAAU,CAACkD,OAAX,CAAmBT,KAApB,CAA7B,EAAyD,GAAzD,CAA7B;;AACA,KAAK,MAAMM,KAAX,IAAoBjC,MAAM,CAACwB,IAAP,CAAYtC,UAAU,CAACkD,OAAX,CAAmBF,IAA/B,CAApB,EAA0D;AACzD,MAAIrC,UAAU,CAACsC,GAAX,CAAeF,KAAf,CAAJ,EAA2B;AAC1B;AACA;;AAED,QAAMI,OAAO,GAAG,OAAOJ,KAAK,CAAC,CAAD,CAAL,CAASK,WAAT,EAAP,GAAgCL,KAAK,CAACrB,KAAN,CAAY,CAAZ,CAAhD;AACAb,EAAAA,MAAM,CAACsC,OAAD,CAAN,GAAkB;AACjBT,IAAAA,GAAG,GAAG;AACL,YAAMtB,KAAK,GAAG,KAAKA,KAAnB;AACA,aAAO,YAAY;AAClB,cAAMgB,IAAI,GAAGpC,UAAU,CAACkD,OAAX,CAAmBxC,YAAY,CAACU,KAAD,CAA/B,EAAwC2B,KAAxC,EAA+CjB,KAA/C,CAAqD,IAArD,EAA2DF,SAA3D,CAAb;AACA,cAAMe,KAAK,GAAG;AACbP,UAAAA,IADa;AAEbK,UAAAA,KAAK,EAAEzC,UAAU,CAACkD,OAAX,CAAmBT,KAFb;AAGbF,UAAAA,OAAO,EAAEvC,UAAU,CAACkD,OAAX,CAAmBX;AAHf,SAAd;AAKA,eAAOK,KAAK,CAACjB,IAAN,CAAW,IAAX,EAAiB,KAAKkB,OAAL,GAAe,KAAKA,OAAL,CAAad,MAAb,CAAoBY,KAApB,CAAf,GAA4C,CAACA,KAAD,CAA7D,EAAsEI,KAAtE,CAAP;AACA,OARD;AASA;;AAZgB,GAAlB;AAcA;;AAED,MAAMM,KAAK,GAAGvC,MAAM,CAACwC,gBAAP,CAAwB,MAAM,CAAE,CAAhC,EAAkCzC,MAAlC,CAAd;;AAEA,SAAS+B,KAAT,CAAeC,OAAf,EAAwBR,GAAxB,EAA6B;AAC5B,QAAMkB,OAAO,GAAG,YAAY;AAC3B,WAAOC,UAAU,CAAC1B,KAAX,CAAiByB,OAAjB,EAA0B3B,SAA1B,CAAP;AACA,GAFD;;AAIA2B,EAAAA,OAAO,CAACV,OAAR,GAAkBA,OAAlB;AAEA,QAAMY,IAAI,GAAG,IAAb;AAEA3C,EAAAA,MAAM,CAAC4C,cAAP,CAAsBH,OAAtB,EAA+B,OAA/B,EAAwC;AACvCI,IAAAA,UAAU,EAAE,IAD2B;;AAEvCjB,IAAAA,GAAG,GAAG;AACL,aAAOe,IAAI,CAACrC,KAAZ;AACA,KAJsC;;AAKvCwC,IAAAA,GAAG,CAACxC,KAAD,EAAQ;AACVqC,MAAAA,IAAI,CAACrC,KAAL,GAAaA,KAAb;AACA;;AAPsC,GAAxC;AAUAN,EAAAA,MAAM,CAAC4C,cAAP,CAAsBH,OAAtB,EAA+B,SAA/B,EAA0C;AACzCI,IAAAA,UAAU,EAAE,IAD6B;;AAEzCjB,IAAAA,GAAG,GAAG;AACL,aAAOe,IAAI,CAACnC,OAAZ;AACA,KAJwC;;AAKzCsC,IAAAA,GAAG,CAACtC,OAAD,EAAU;AACZmC,MAAAA,IAAI,CAACnC,OAAL,GAAeA,OAAf;AACA;;AAPwC,GAA1C,EAnB4B,CA6B5B;;AACAiC,EAAAA,OAAO,CAACM,OAAR,GAAkB,KAAKA,OAAL,IAAgBxB,GAAG,KAAK,MAAxB,IAAkCA,GAAG,KAAK,MAA5D,CA9B4B,CAgC5B;AACA;;AACAkB,EAAAA,OAAO,CAACO,SAAR,GAAoBT,KAApB,CAlC4B,CAkCD;;AAE3B,SAAOE,OAAP;AACA;;AAED,SAASC,UAAT,GAAsB;AACrB;AACA,QAAM/B,IAAI,GAAGG,SAAb;AACA,QAAMmC,OAAO,GAAGtC,IAAI,CAACuC,MAArB;AACA,MAAIC,GAAG,GAAGC,MAAM,CAACtC,SAAS,CAAC,CAAD,CAAV,CAAhB;;AAEA,MAAImC,OAAO,KAAK,CAAhB,EAAmB;AAClB,WAAO,EAAP;AACA;;AAED,MAAIA,OAAO,GAAG,CAAd,EAAiB;AAChB;AACA,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,OAApB,EAA6BI,CAAC,EAA9B,EAAkC;AACjCF,MAAAA,GAAG,IAAI,MAAMxC,IAAI,CAAC0C,CAAD,CAAjB;AACA;AACD;;AAED,MAAI,CAAC,KAAK7C,OAAN,IAAiB,KAAKF,KAAL,IAAc,CAA/B,IAAoC,CAAC6C,GAAzC,EAA8C;AAC7C,WAAOA,GAAP;AACA,GAnBoB,CAqBrB;AACA;AACA;;;AACA,QAAMG,WAAW,GAAGpE,UAAU,CAACqE,GAAX,CAAejC,IAAnC;;AACA,MAAIjC,mBAAmB,IAAI,KAAK0D,OAAhC,EAAyC;AACxC7D,IAAAA,UAAU,CAACqE,GAAX,CAAejC,IAAf,GAAsB,EAAtB;AACA;;AAED,OAAK,MAAMkC,IAAX,IAAmB,KAAKzB,OAAL,CAAanB,KAAb,GAAqB6C,OAArB,EAAnB,EAAmD;AAClD;AACA;AACA;AACAN,IAAAA,GAAG,GAAGK,IAAI,CAAClC,IAAL,GAAY6B,GAAG,CAACO,OAAJ,CAAYF,IAAI,CAAC/B,OAAjB,EAA0B+B,IAAI,CAAClC,IAA/B,CAAZ,GAAmDkC,IAAI,CAAC7B,KAA9D,CAJkD,CAMlD;AACA;AACA;;AACAwB,IAAAA,GAAG,GAAGA,GAAG,CAACO,OAAJ,CAAY,QAAZ,EAAuB,GAAEF,IAAI,CAAC7B,KAAM,KAAI6B,IAAI,CAAClC,IAAK,EAAlD,CAAN;AACA,GAvCoB,CAyCrB;;;AACApC,EAAAA,UAAU,CAACqE,GAAX,CAAejC,IAAf,GAAsBgC,WAAtB;AAEA,SAAOH,GAAP;AACA;;AAED,SAASpC,QAAT,CAAkBL,KAAlB,EAAyBiD,OAAzB,EAAkC;AACjC,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,OAAd,CAAL,EAA6B;AAC5B;AACA;AACA,WAAO,GAAG/C,KAAH,CAASC,IAAT,CAAcC,SAAd,EAAyB,CAAzB,EAA4BgD,IAA5B,CAAiC,GAAjC,CAAP;AACA;;AAED,QAAMnD,IAAI,GAAG,GAAGC,KAAH,CAASC,IAAT,CAAcC,SAAd,EAAyB,CAAzB,CAAb;AACA,QAAMiD,KAAK,GAAG,CAACJ,OAAO,CAACK,GAAR,CAAY,CAAZ,CAAD,CAAd;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,OAAO,CAACT,MAA5B,EAAoCe,CAAC,EAArC,EAAyC;AACxCF,IAAAA,KAAK,CAACG,IAAN,CAAWd,MAAM,CAACzC,IAAI,CAACsD,CAAC,GAAG,CAAL,CAAL,CAAN,CAAoBP,OAApB,CAA4B,SAA5B,EAAuC,MAAvC,CAAX;AACAK,IAAAA,KAAK,CAACG,IAAN,CAAWd,MAAM,CAACO,OAAO,CAACK,GAAR,CAAYC,CAAZ,CAAD,CAAjB;AACA;;AAED,SAAO7E,QAAQ,CAACsB,KAAD,EAAQqD,KAAK,CAACD,IAAN,CAAW,EAAX,CAAR,CAAf;AACA;;AAED9D,MAAM,CAACwC,gBAAP,CAAwB/B,KAAK,CAACU,SAA9B,EAAyCpB,MAAzC;AAEAoE,MAAM,CAACC,OAAP,GAAiB3D,KAAK,EAAtB,C,CAA0B;;AAC1B0D,MAAM,CAACC,OAAP,CAAejF,aAAf,GAA+BA,aAA/B","sourcesContent":["'use strict';\nconst escapeStringRegexp = require('escape-string-regexp');\nconst ansiStyles = require('ansi-styles');\nconst supportsColor = require('supports-color');\n\nconst template = require('./templates.js');\n\nconst isSimpleWindowsTerm = process.platform === 'win32' && !(process.env.TERM || '').toLowerCase().startsWith('xterm');\n\n// `supportsColor.level` â†’ `ansiStyles.color[name]` mapping\nconst levelMapping = ['ansi', 'ansi', 'ansi256', 'ansi16m'];\n\n// `color-convert` models to exclude from the Chalk API due to conflicts and such\nconst skipModels = new Set(['gray']);\n\nconst styles = Object.create(null);\n\nfunction applyOptions(obj, options) {\n\toptions = options || {};\n\n\t// Detect level if not set manually\n\tconst scLevel = supportsColor ? supportsColor.level : 0;\n\tobj.level = options.level === undefined ? scLevel : options.level;\n\tobj.enabled = 'enabled' in options ? options.enabled : obj.level > 0;\n}\n\nfunction Chalk(options) {\n\t// We check for this.template here since calling `chalk.constructor()`\n\t// by itself will have a `this` of a previously constructed chalk object\n\tif (!this || !(this instanceof Chalk) || this.template) {\n\t\tconst chalk = {};\n\t\tapplyOptions(chalk, options);\n\n\t\tchalk.template = function () {\n\t\t\tconst args = [].slice.call(arguments);\n\t\t\treturn chalkTag.apply(null, [chalk.template].concat(args));\n\t\t};\n\n\t\tObject.setPrototypeOf(chalk, Chalk.prototype);\n\t\tObject.setPrototypeOf(chalk.template, chalk);\n\n\t\tchalk.template.constructor = Chalk;\n\n\t\treturn chalk.template;\n\t}\n\n\tapplyOptions(this, options);\n}\n\n// Use bright blue on Windows as the normal blue color is illegible\nif (isSimpleWindowsTerm) {\n\tansiStyles.blue.open = '\\u001B[94m';\n}\n\nfor (const key of Object.keys(ansiStyles)) {\n\tansiStyles[key].closeRe = new RegExp(escapeStringRegexp(ansiStyles[key].close), 'g');\n\n\tstyles[key] = {\n\t\tget() {\n\t\t\tconst codes = ansiStyles[key];\n\t\t\treturn build.call(this, this._styles ? this._styles.concat(codes) : [codes], key);\n\t\t}\n\t};\n}\n\nansiStyles.color.closeRe = new RegExp(escapeStringRegexp(ansiStyles.color.close), 'g');\nfor (const model of Object.keys(ansiStyles.color.ansi)) {\n\tif (skipModels.has(model)) {\n\t\tcontinue;\n\t}\n\n\tstyles[model] = {\n\t\tget() {\n\t\t\tconst level = this.level;\n\t\t\treturn function () {\n\t\t\t\tconst open = ansiStyles.color[levelMapping[level]][model].apply(null, arguments);\n\t\t\t\tconst codes = {\n\t\t\t\t\topen,\n\t\t\t\t\tclose: ansiStyles.color.close,\n\t\t\t\t\tcloseRe: ansiStyles.color.closeRe\n\t\t\t\t};\n\t\t\t\treturn build.call(this, this._styles ? this._styles.concat(codes) : [codes], model);\n\t\t\t};\n\t\t}\n\t};\n}\n\nansiStyles.bgColor.closeRe = new RegExp(escapeStringRegexp(ansiStyles.bgColor.close), 'g');\nfor (const model of Object.keys(ansiStyles.bgColor.ansi)) {\n\tif (skipModels.has(model)) {\n\t\tcontinue;\n\t}\n\n\tconst bgModel = 'bg' + model[0].toUpperCase() + model.slice(1);\n\tstyles[bgModel] = {\n\t\tget() {\n\t\t\tconst level = this.level;\n\t\t\treturn function () {\n\t\t\t\tconst open = ansiStyles.bgColor[levelMapping[level]][model].apply(null, arguments);\n\t\t\t\tconst codes = {\n\t\t\t\t\topen,\n\t\t\t\t\tclose: ansiStyles.bgColor.close,\n\t\t\t\t\tcloseRe: ansiStyles.bgColor.closeRe\n\t\t\t\t};\n\t\t\t\treturn build.call(this, this._styles ? this._styles.concat(codes) : [codes], model);\n\t\t\t};\n\t\t}\n\t};\n}\n\nconst proto = Object.defineProperties(() => {}, styles);\n\nfunction build(_styles, key) {\n\tconst builder = function () {\n\t\treturn applyStyle.apply(builder, arguments);\n\t};\n\n\tbuilder._styles = _styles;\n\n\tconst self = this;\n\n\tObject.defineProperty(builder, 'level', {\n\t\tenumerable: true,\n\t\tget() {\n\t\t\treturn self.level;\n\t\t},\n\t\tset(level) {\n\t\t\tself.level = level;\n\t\t}\n\t});\n\n\tObject.defineProperty(builder, 'enabled', {\n\t\tenumerable: true,\n\t\tget() {\n\t\t\treturn self.enabled;\n\t\t},\n\t\tset(enabled) {\n\t\t\tself.enabled = enabled;\n\t\t}\n\t});\n\n\t// See below for fix regarding invisible grey/dim combination on Windows\n\tbuilder.hasGrey = this.hasGrey || key === 'gray' || key === 'grey';\n\n\t// `__proto__` is used because we must return a function, but there is\n\t// no way to create a function with a different prototype\n\tbuilder.__proto__ = proto; // eslint-disable-line no-proto\n\n\treturn builder;\n}\n\nfunction applyStyle() {\n\t// Support varags, but simply cast to string in case there's only one arg\n\tconst args = arguments;\n\tconst argsLen = args.length;\n\tlet str = String(arguments[0]);\n\n\tif (argsLen === 0) {\n\t\treturn '';\n\t}\n\n\tif (argsLen > 1) {\n\t\t// Don't slice `arguments`, it prevents V8 optimizations\n\t\tfor (let a = 1; a < argsLen; a++) {\n\t\t\tstr += ' ' + args[a];\n\t\t}\n\t}\n\n\tif (!this.enabled || this.level <= 0 || !str) {\n\t\treturn str;\n\t}\n\n\t// Turns out that on Windows dimmed gray text becomes invisible in cmd.exe,\n\t// see https://github.com/chalk/chalk/issues/58\n\t// If we're on Windows and we're dealing with a gray color, temporarily make 'dim' a noop.\n\tconst originalDim = ansiStyles.dim.open;\n\tif (isSimpleWindowsTerm && this.hasGrey) {\n\t\tansiStyles.dim.open = '';\n\t}\n\n\tfor (const code of this._styles.slice().reverse()) {\n\t\t// Replace any instances already present with a re-opening code\n\t\t// otherwise only the part of the string until said closing code\n\t\t// will be colored, and the rest will simply be 'plain'.\n\t\tstr = code.open + str.replace(code.closeRe, code.open) + code.close;\n\n\t\t// Close the styling before a linebreak and reopen\n\t\t// after next line to fix a bleed issue on macOS\n\t\t// https://github.com/chalk/chalk/pull/92\n\t\tstr = str.replace(/\\r?\\n/g, `${code.close}$&${code.open}`);\n\t}\n\n\t// Reset the original `dim` if we changed it to work around the Windows dimmed gray issue\n\tansiStyles.dim.open = originalDim;\n\n\treturn str;\n}\n\nfunction chalkTag(chalk, strings) {\n\tif (!Array.isArray(strings)) {\n\t\t// If chalk() was called by itself or with a string,\n\t\t// return the string itself as a string.\n\t\treturn [].slice.call(arguments, 1).join(' ');\n\t}\n\n\tconst args = [].slice.call(arguments, 2);\n\tconst parts = [strings.raw[0]];\n\n\tfor (let i = 1; i < strings.length; i++) {\n\t\tparts.push(String(args[i - 1]).replace(/[{}\\\\]/g, '\\\\$&'));\n\t\tparts.push(String(strings.raw[i]));\n\t}\n\n\treturn template(chalk, parts.join(''));\n}\n\nObject.defineProperties(Chalk.prototype, styles);\n\nmodule.exports = Chalk(); // eslint-disable-line new-cap\nmodule.exports.supportsColor = supportsColor;\n"]},"metadata":{},"sourceType":"script"}