{"ast":null,"code":"/*\nCopyright (c) 2020 Uber Technologies, Inc.\n\nThis source code is licensed under the MIT license found in the\nLICENSE file in the root directory of this source tree.\n*/\nimport { parseCode } from './ast';\nimport { Action, PropTypes } from './const';\nexport const updateCode = (dispatch, newCode) => {\n  dispatch({\n    type: Action.UpdateCode,\n    payload: newCode\n  });\n};\nexport const updateCodeAndProvider = (dispatch, newCode, providerValue) => {\n  dispatch({\n    type: Action.UpdateCodeAndProvider,\n    payload: {\n      code: newCode,\n      providerValue\n    }\n  });\n};\nexport const updateAll = (dispatch, newCode, componentName, propsConfig, parseProvider, customProps) => {\n  const propValues = {};\n  const {\n    parsedProps,\n    parsedProvider\n  } = parseCode(newCode, componentName, parseProvider);\n  Object.keys(propsConfig).forEach(name => {\n    propValues[name] = propsConfig[name].value;\n\n    if (customProps && customProps[name] && customProps[name].parse) {\n      // custom prop parser\n      propValues[name] = customProps[name].parse(parsedProps[name], propsConfig);\n    } else if (propsConfig[name].type === PropTypes.Date) {\n      const match = parsedProps[name].match(/^new\\s*Date\\(\\s*\"([0-9-T:.Z]+)\"\\s*\\)$/);\n\n      if (match) {\n        propValues[name] = match[1];\n      } else {\n        propValues[name] = parsedProps[name];\n      }\n    } else {\n      propValues[name] = parsedProps[name];\n    }\n  });\n  dispatch({\n    type: Action.Update,\n    payload: {\n      code: newCode,\n      updatedPropValues: propValues,\n      providerValue: parsedProvider\n    }\n  });\n};\nexport const updatePropsAndCodeNoRecompile = (dispatch, newCode, propName, propValue) => {\n  dispatch({\n    type: Action.UpdatePropsAndCodeNoRecompile,\n    payload: {\n      codeNoRecompile: newCode,\n      updatedPropValues: {\n        [propName]: propValue\n      }\n    }\n  });\n};\nexport const updatePropsAndCode = (dispatch, newCode, propName, propValue) => {\n  dispatch({\n    type: Action.UpdatePropsAndCode,\n    payload: {\n      code: newCode,\n      updatedPropValues: {\n        [propName]: propValue\n      }\n    }\n  });\n};\nexport const updateProps = (dispatch, propName, propValue) => {\n  dispatch({\n    type: Action.UpdateProps,\n    payload: {\n      [propName]: propValue\n    }\n  });\n};\nexport const reset = (dispatch, initialCode, providerValue, propsConfig) => {\n  dispatch({\n    type: Action.Reset,\n    payload: {\n      code: initialCode,\n      props: propsConfig,\n      providerValue\n    }\n  });\n};","map":{"version":3,"sources":["../../src/actions.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\nCopyright (c) 2020 Uber Technologies, Inc.\n\nThis source code is licensed under the MIT license found in the\nLICENSE file in the root directory of this source tree.\n*/\nimport { parseCode } from './ast';\nimport { Action, PropTypes } from './const';\nexport const updateCode = (dispatch, newCode) => {\n    dispatch({\n        type: Action.UpdateCode,\n        payload: newCode,\n    });\n};\nexport const updateCodeAndProvider = (dispatch, newCode, providerValue) => {\n    dispatch({\n        type: Action.UpdateCodeAndProvider,\n        payload: {\n            code: newCode,\n            providerValue,\n        },\n    });\n};\nexport const updateAll = (dispatch, newCode, componentName, propsConfig, parseProvider, customProps) => {\n    const propValues = {};\n    const { parsedProps, parsedProvider } = parseCode(newCode, componentName, parseProvider);\n    Object.keys(propsConfig).forEach(name => {\n        propValues[name] = propsConfig[name].value;\n        if (customProps && customProps[name] && customProps[name].parse) {\n            // custom prop parser\n            propValues[name] = customProps[name].parse(parsedProps[name], propsConfig);\n        }\n        else if (propsConfig[name].type === PropTypes.Date) {\n            const match = parsedProps[name].match(/^new\\s*Date\\(\\s*\"([0-9-T:.Z]+)\"\\s*\\)$/);\n            if (match) {\n                propValues[name] = match[1];\n            }\n            else {\n                propValues[name] = parsedProps[name];\n            }\n        }\n        else {\n            propValues[name] = parsedProps[name];\n        }\n    });\n    dispatch({\n        type: Action.Update,\n        payload: {\n            code: newCode,\n            updatedPropValues: propValues,\n            providerValue: parsedProvider,\n        },\n    });\n};\nexport const updatePropsAndCodeNoRecompile = (dispatch, newCode, propName, propValue) => {\n    dispatch({\n        type: Action.UpdatePropsAndCodeNoRecompile,\n        payload: {\n            codeNoRecompile: newCode,\n            updatedPropValues: { [propName]: propValue },\n        },\n    });\n};\nexport const updatePropsAndCode = (dispatch, newCode, propName, propValue) => {\n    dispatch({\n        type: Action.UpdatePropsAndCode,\n        payload: {\n            code: newCode,\n            updatedPropValues: { [propName]: propValue },\n        },\n    });\n};\nexport const updateProps = (dispatch, propName, propValue) => {\n    dispatch({\n        type: Action.UpdateProps,\n        payload: { [propName]: propValue },\n    });\n};\nexport const reset = (dispatch, initialCode, providerValue, propsConfig) => {\n    dispatch({\n        type: Action.Reset,\n        payload: {\n            code: initialCode,\n            props: propsConfig,\n            providerValue,\n        },\n    });\n};\n//# sourceMappingURL=actions.js.map"]},"metadata":{},"sourceType":"module"}