{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = memberExpressionToFunctions;\n\nvar t = _interopRequireWildcard(require(\"@babel/types\"));\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function () {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nclass AssignmentMemoiser {\n  constructor() {\n    this._map = new WeakMap();\n  }\n\n  has(key) {\n    return this._map.has(key);\n  }\n\n  get(key) {\n    if (!this.has(key)) return;\n\n    const record = this._map.get(key);\n\n    const {\n      value\n    } = record;\n    record.count--;\n\n    if (record.count === 0) {\n      return t.assignmentExpression(\"=\", value, key);\n    }\n\n    return value;\n  }\n\n  set(key, value, count) {\n    return this._map.set(key, {\n      count,\n      value\n    });\n  }\n\n}\n\nfunction toNonOptional(path, base) {\n  const {\n    node\n  } = path;\n\n  if (path.isOptionalMemberExpression()) {\n    return t.memberExpression(base, node.property, node.computed);\n  }\n\n  if (path.isOptionalCallExpression()) {\n    const callee = path.get(\"callee\");\n\n    if (path.node.optional && callee.isOptionalMemberExpression()) {\n      const {\n        object\n      } = callee.node;\n      const context = path.scope.maybeGenerateMemoised(object) || object;\n      callee.get(\"object\").replaceWith(t.assignmentExpression(\"=\", context, object));\n      return t.callExpression(t.memberExpression(base, t.identifier(\"call\")), [context, ...node.arguments]);\n    }\n\n    return t.callExpression(base, node.arguments);\n  }\n\n  return path.node;\n}\n\nfunction isInDetachedTree(path) {\n  while (path) {\n    if (path.isProgram()) break;\n    const {\n      parentPath,\n      container,\n      listKey\n    } = path;\n    const parentNode = parentPath.node;\n\n    if (listKey) {\n      if (container !== parentNode[listKey]) return true;\n    } else {\n      if (container !== parentNode) return true;\n    }\n\n    path = parentPath;\n  }\n\n  return false;\n}\n\nconst handle = {\n  memoise() {},\n\n  handle(member) {\n    const {\n      node,\n      parent,\n      parentPath\n    } = member;\n\n    if (member.isOptionalMemberExpression()) {\n      if (isInDetachedTree(member)) return;\n      const endPath = member.find(({\n        node,\n        parent,\n        parentPath\n      }) => {\n        if (parentPath.isOptionalMemberExpression()) {\n          return parent.optional || parent.object !== node;\n        }\n\n        if (parentPath.isOptionalCallExpression()) {\n          return node !== member.node && parent.optional || parent.callee !== node;\n        }\n\n        return true;\n      });\n      const rootParentPath = endPath.parentPath;\n\n      if (rootParentPath.isUpdateExpression({\n        argument: node\n      }) || rootParentPath.isAssignmentExpression({\n        left: node\n      })) {\n        throw member.buildCodeFrameError(`can't handle assignment`);\n      }\n\n      const isDeleteOperation = rootParentPath.isUnaryExpression({\n        operator: \"delete\"\n      });\n\n      if (isDeleteOperation && endPath.isOptionalMemberExpression() && endPath.get(\"property\").isPrivateName()) {\n        throw member.buildCodeFrameError(`can't delete a private class element`);\n      }\n\n      let startingOptional = member;\n\n      for (;;) {\n        if (startingOptional.isOptionalMemberExpression()) {\n          if (startingOptional.node.optional) break;\n          startingOptional = startingOptional.get(\"object\");\n          continue;\n        } else if (startingOptional.isOptionalCallExpression()) {\n          if (startingOptional.node.optional) break;\n          startingOptional = startingOptional.get(\"callee\");\n          continue;\n        }\n\n        throw new Error(`Internal error: unexpected ${startingOptional.node.type}`);\n      }\n\n      const {\n        scope\n      } = member;\n      const startingProp = startingOptional.isOptionalMemberExpression() ? \"object\" : \"callee\";\n      const startingNode = startingOptional.node[startingProp];\n      const baseNeedsMemoised = scope.maybeGenerateMemoised(startingNode);\n      const baseRef = baseNeedsMemoised != null ? baseNeedsMemoised : startingNode;\n      const parentIsOptionalCall = parentPath.isOptionalCallExpression({\n        callee: node\n      });\n      const parentIsCall = parentPath.isCallExpression({\n        callee: node\n      });\n      startingOptional.replaceWith(toNonOptional(startingOptional, baseRef));\n\n      if (parentIsOptionalCall) {\n        if (parent.optional) {\n          parentPath.replaceWith(this.optionalCall(member, parent.arguments));\n        } else {\n          parentPath.replaceWith(this.call(member, parent.arguments));\n        }\n      } else if (parentIsCall) {\n        member.replaceWith(this.boundGet(member));\n      } else {\n        member.replaceWith(this.get(member));\n      }\n\n      let regular = member.node;\n\n      for (let current = member; current !== endPath;) {\n        const {\n          parentPath\n        } = current;\n\n        if (parentPath === endPath && parentIsOptionalCall && parent.optional) {\n          regular = parentPath.node;\n          break;\n        }\n\n        regular = toNonOptional(parentPath, regular);\n        current = parentPath;\n      }\n\n      let context;\n      const endParentPath = endPath.parentPath;\n\n      if (t.isMemberExpression(regular) && endParentPath.isOptionalCallExpression({\n        callee: endPath.node,\n        optional: true\n      })) {\n        const {\n          object\n        } = regular;\n        context = member.scope.maybeGenerateMemoised(object);\n\n        if (context) {\n          regular.object = t.assignmentExpression(\"=\", context, object);\n        }\n      }\n\n      let replacementPath = endPath;\n\n      if (isDeleteOperation) {\n        replacementPath = endParentPath;\n        regular = endParentPath.node;\n      }\n\n      replacementPath.replaceWith(t.conditionalExpression(t.logicalExpression(\"||\", t.binaryExpression(\"===\", baseNeedsMemoised ? t.assignmentExpression(\"=\", t.cloneNode(baseRef), t.cloneNode(startingNode)) : t.cloneNode(baseRef), t.nullLiteral()), t.binaryExpression(\"===\", t.cloneNode(baseRef), scope.buildUndefinedNode())), isDeleteOperation ? t.booleanLiteral(true) : scope.buildUndefinedNode(), regular));\n\n      if (context) {\n        const endParent = endParentPath.node;\n        endParentPath.replaceWith(t.optionalCallExpression(t.optionalMemberExpression(endParent.callee, t.identifier(\"call\"), false, true), [t.cloneNode(context), ...endParent.arguments], false));\n      }\n\n      return;\n    }\n\n    if (parentPath.isUpdateExpression({\n      argument: node\n    })) {\n      if (this.simpleSet) {\n        member.replaceWith(this.simpleSet(member));\n        return;\n      }\n\n      const {\n        operator,\n        prefix\n      } = parent;\n      this.memoise(member, 2);\n      const value = t.binaryExpression(operator[0], t.unaryExpression(\"+\", this.get(member)), t.numericLiteral(1));\n\n      if (prefix) {\n        parentPath.replaceWith(this.set(member, value));\n      } else {\n        const {\n          scope\n        } = member;\n        const ref = scope.generateUidIdentifierBasedOnNode(node);\n        scope.push({\n          id: ref\n        });\n        value.left = t.assignmentExpression(\"=\", t.cloneNode(ref), value.left);\n        parentPath.replaceWith(t.sequenceExpression([this.set(member, value), t.cloneNode(ref)]));\n      }\n\n      return;\n    }\n\n    if (parentPath.isAssignmentExpression({\n      left: node\n    })) {\n      if (this.simpleSet) {\n        member.replaceWith(this.simpleSet(member));\n        return;\n      }\n\n      const {\n        operator,\n        right: value\n      } = parent;\n\n      if (operator === \"=\") {\n        parentPath.replaceWith(this.set(member, value));\n      } else {\n        const operatorTrunc = operator.slice(0, -1);\n\n        if (t.LOGICAL_OPERATORS.includes(operatorTrunc)) {\n          this.memoise(member, 1);\n          parentPath.replaceWith(t.logicalExpression(operatorTrunc, this.get(member), this.set(member, value)));\n        } else {\n          this.memoise(member, 2);\n          parentPath.replaceWith(this.set(member, t.binaryExpression(operatorTrunc, this.get(member), value)));\n        }\n      }\n\n      return;\n    }\n\n    if (parentPath.isCallExpression({\n      callee: node\n    })) {\n      parentPath.replaceWith(this.call(member, parent.arguments));\n      return;\n    }\n\n    if (parentPath.isOptionalCallExpression({\n      callee: node\n    })) {\n      parentPath.replaceWith(this.optionalCall(member, parent.arguments));\n      return;\n    }\n\n    if (parentPath.isForXStatement({\n      left: node\n    }) || parentPath.isObjectProperty({\n      value: node\n    }) && parentPath.parentPath.isObjectPattern() || parentPath.isAssignmentPattern({\n      left: node\n    }) && parentPath.parentPath.isObjectProperty({\n      value: parent\n    }) && parentPath.parentPath.parentPath.isObjectPattern() || parentPath.isArrayPattern() || parentPath.isAssignmentPattern({\n      left: node\n    }) && parentPath.parentPath.isArrayPattern() || parentPath.isRestElement()) {\n      member.replaceWith(this.destructureSet(member));\n      return;\n    }\n\n    member.replaceWith(this.get(member));\n  }\n\n};\n\nfunction memberExpressionToFunctions(path, visitor, state) {\n  path.traverse(visitor, Object.assign({}, handle, state, {\n    memoiser: new AssignmentMemoiser()\n  }));\n}","map":{"version":3,"sources":["/Users/pranamyavadlamani/Desktop/Research/PortFolio/portfolio-site/node_modules/@babel/helper-member-expression-to-functions/lib/index.js"],"names":["Object","defineProperty","exports","value","default","memberExpressionToFunctions","t","_interopRequireWildcard","require","_getRequireWildcardCache","WeakMap","cache","obj","__esModule","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","AssignmentMemoiser","constructor","_map","record","count","assignmentExpression","toNonOptional","path","base","node","isOptionalMemberExpression","memberExpression","property","computed","isOptionalCallExpression","callee","optional","object","context","scope","maybeGenerateMemoised","replaceWith","callExpression","identifier","arguments","isInDetachedTree","isProgram","parentPath","container","listKey","parentNode","handle","memoise","member","parent","endPath","find","rootParentPath","isUpdateExpression","argument","isAssignmentExpression","left","buildCodeFrameError","isDeleteOperation","isUnaryExpression","operator","isPrivateName","startingOptional","Error","type","startingProp","startingNode","baseNeedsMemoised","baseRef","parentIsOptionalCall","parentIsCall","isCallExpression","optionalCall","boundGet","regular","current","endParentPath","isMemberExpression","replacementPath","conditionalExpression","logicalExpression","binaryExpression","cloneNode","nullLiteral","buildUndefinedNode","booleanLiteral","endParent","optionalCallExpression","optionalMemberExpression","simpleSet","prefix","unaryExpression","numericLiteral","ref","generateUidIdentifierBasedOnNode","push","id","sequenceExpression","right","operatorTrunc","slice","LOGICAL_OPERATORS","includes","isForXStatement","isObjectProperty","isObjectPattern","isAssignmentPattern","isArrayPattern","isRestElement","destructureSet","visitor","state","traverse","assign","memoiser"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = memberExpressionToFunctions;\n\nvar t = _interopRequireWildcard(require(\"@babel/types\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nclass AssignmentMemoiser {\n  constructor() {\n    this._map = new WeakMap();\n  }\n\n  has(key) {\n    return this._map.has(key);\n  }\n\n  get(key) {\n    if (!this.has(key)) return;\n\n    const record = this._map.get(key);\n\n    const {\n      value\n    } = record;\n    record.count--;\n\n    if (record.count === 0) {\n      return t.assignmentExpression(\"=\", value, key);\n    }\n\n    return value;\n  }\n\n  set(key, value, count) {\n    return this._map.set(key, {\n      count,\n      value\n    });\n  }\n\n}\n\nfunction toNonOptional(path, base) {\n  const {\n    node\n  } = path;\n\n  if (path.isOptionalMemberExpression()) {\n    return t.memberExpression(base, node.property, node.computed);\n  }\n\n  if (path.isOptionalCallExpression()) {\n    const callee = path.get(\"callee\");\n\n    if (path.node.optional && callee.isOptionalMemberExpression()) {\n      const {\n        object\n      } = callee.node;\n      const context = path.scope.maybeGenerateMemoised(object) || object;\n      callee.get(\"object\").replaceWith(t.assignmentExpression(\"=\", context, object));\n      return t.callExpression(t.memberExpression(base, t.identifier(\"call\")), [context, ...node.arguments]);\n    }\n\n    return t.callExpression(base, node.arguments);\n  }\n\n  return path.node;\n}\n\nfunction isInDetachedTree(path) {\n  while (path) {\n    if (path.isProgram()) break;\n    const {\n      parentPath,\n      container,\n      listKey\n    } = path;\n    const parentNode = parentPath.node;\n\n    if (listKey) {\n      if (container !== parentNode[listKey]) return true;\n    } else {\n      if (container !== parentNode) return true;\n    }\n\n    path = parentPath;\n  }\n\n  return false;\n}\n\nconst handle = {\n  memoise() {},\n\n  handle(member) {\n    const {\n      node,\n      parent,\n      parentPath\n    } = member;\n\n    if (member.isOptionalMemberExpression()) {\n      if (isInDetachedTree(member)) return;\n      const endPath = member.find(({\n        node,\n        parent,\n        parentPath\n      }) => {\n        if (parentPath.isOptionalMemberExpression()) {\n          return parent.optional || parent.object !== node;\n        }\n\n        if (parentPath.isOptionalCallExpression()) {\n          return node !== member.node && parent.optional || parent.callee !== node;\n        }\n\n        return true;\n      });\n      const rootParentPath = endPath.parentPath;\n\n      if (rootParentPath.isUpdateExpression({\n        argument: node\n      }) || rootParentPath.isAssignmentExpression({\n        left: node\n      })) {\n        throw member.buildCodeFrameError(`can't handle assignment`);\n      }\n\n      const isDeleteOperation = rootParentPath.isUnaryExpression({\n        operator: \"delete\"\n      });\n\n      if (isDeleteOperation && endPath.isOptionalMemberExpression() && endPath.get(\"property\").isPrivateName()) {\n        throw member.buildCodeFrameError(`can't delete a private class element`);\n      }\n\n      let startingOptional = member;\n\n      for (;;) {\n        if (startingOptional.isOptionalMemberExpression()) {\n          if (startingOptional.node.optional) break;\n          startingOptional = startingOptional.get(\"object\");\n          continue;\n        } else if (startingOptional.isOptionalCallExpression()) {\n          if (startingOptional.node.optional) break;\n          startingOptional = startingOptional.get(\"callee\");\n          continue;\n        }\n\n        throw new Error(`Internal error: unexpected ${startingOptional.node.type}`);\n      }\n\n      const {\n        scope\n      } = member;\n      const startingProp = startingOptional.isOptionalMemberExpression() ? \"object\" : \"callee\";\n      const startingNode = startingOptional.node[startingProp];\n      const baseNeedsMemoised = scope.maybeGenerateMemoised(startingNode);\n      const baseRef = baseNeedsMemoised != null ? baseNeedsMemoised : startingNode;\n      const parentIsOptionalCall = parentPath.isOptionalCallExpression({\n        callee: node\n      });\n      const parentIsCall = parentPath.isCallExpression({\n        callee: node\n      });\n      startingOptional.replaceWith(toNonOptional(startingOptional, baseRef));\n\n      if (parentIsOptionalCall) {\n        if (parent.optional) {\n          parentPath.replaceWith(this.optionalCall(member, parent.arguments));\n        } else {\n          parentPath.replaceWith(this.call(member, parent.arguments));\n        }\n      } else if (parentIsCall) {\n        member.replaceWith(this.boundGet(member));\n      } else {\n        member.replaceWith(this.get(member));\n      }\n\n      let regular = member.node;\n\n      for (let current = member; current !== endPath;) {\n        const {\n          parentPath\n        } = current;\n\n        if (parentPath === endPath && parentIsOptionalCall && parent.optional) {\n          regular = parentPath.node;\n          break;\n        }\n\n        regular = toNonOptional(parentPath, regular);\n        current = parentPath;\n      }\n\n      let context;\n      const endParentPath = endPath.parentPath;\n\n      if (t.isMemberExpression(regular) && endParentPath.isOptionalCallExpression({\n        callee: endPath.node,\n        optional: true\n      })) {\n        const {\n          object\n        } = regular;\n        context = member.scope.maybeGenerateMemoised(object);\n\n        if (context) {\n          regular.object = t.assignmentExpression(\"=\", context, object);\n        }\n      }\n\n      let replacementPath = endPath;\n\n      if (isDeleteOperation) {\n        replacementPath = endParentPath;\n        regular = endParentPath.node;\n      }\n\n      replacementPath.replaceWith(t.conditionalExpression(t.logicalExpression(\"||\", t.binaryExpression(\"===\", baseNeedsMemoised ? t.assignmentExpression(\"=\", t.cloneNode(baseRef), t.cloneNode(startingNode)) : t.cloneNode(baseRef), t.nullLiteral()), t.binaryExpression(\"===\", t.cloneNode(baseRef), scope.buildUndefinedNode())), isDeleteOperation ? t.booleanLiteral(true) : scope.buildUndefinedNode(), regular));\n\n      if (context) {\n        const endParent = endParentPath.node;\n        endParentPath.replaceWith(t.optionalCallExpression(t.optionalMemberExpression(endParent.callee, t.identifier(\"call\"), false, true), [t.cloneNode(context), ...endParent.arguments], false));\n      }\n\n      return;\n    }\n\n    if (parentPath.isUpdateExpression({\n      argument: node\n    })) {\n      if (this.simpleSet) {\n        member.replaceWith(this.simpleSet(member));\n        return;\n      }\n\n      const {\n        operator,\n        prefix\n      } = parent;\n      this.memoise(member, 2);\n      const value = t.binaryExpression(operator[0], t.unaryExpression(\"+\", this.get(member)), t.numericLiteral(1));\n\n      if (prefix) {\n        parentPath.replaceWith(this.set(member, value));\n      } else {\n        const {\n          scope\n        } = member;\n        const ref = scope.generateUidIdentifierBasedOnNode(node);\n        scope.push({\n          id: ref\n        });\n        value.left = t.assignmentExpression(\"=\", t.cloneNode(ref), value.left);\n        parentPath.replaceWith(t.sequenceExpression([this.set(member, value), t.cloneNode(ref)]));\n      }\n\n      return;\n    }\n\n    if (parentPath.isAssignmentExpression({\n      left: node\n    })) {\n      if (this.simpleSet) {\n        member.replaceWith(this.simpleSet(member));\n        return;\n      }\n\n      const {\n        operator,\n        right: value\n      } = parent;\n\n      if (operator === \"=\") {\n        parentPath.replaceWith(this.set(member, value));\n      } else {\n        const operatorTrunc = operator.slice(0, -1);\n\n        if (t.LOGICAL_OPERATORS.includes(operatorTrunc)) {\n          this.memoise(member, 1);\n          parentPath.replaceWith(t.logicalExpression(operatorTrunc, this.get(member), this.set(member, value)));\n        } else {\n          this.memoise(member, 2);\n          parentPath.replaceWith(this.set(member, t.binaryExpression(operatorTrunc, this.get(member), value)));\n        }\n      }\n\n      return;\n    }\n\n    if (parentPath.isCallExpression({\n      callee: node\n    })) {\n      parentPath.replaceWith(this.call(member, parent.arguments));\n      return;\n    }\n\n    if (parentPath.isOptionalCallExpression({\n      callee: node\n    })) {\n      parentPath.replaceWith(this.optionalCall(member, parent.arguments));\n      return;\n    }\n\n    if (parentPath.isForXStatement({\n      left: node\n    }) || parentPath.isObjectProperty({\n      value: node\n    }) && parentPath.parentPath.isObjectPattern() || parentPath.isAssignmentPattern({\n      left: node\n    }) && parentPath.parentPath.isObjectProperty({\n      value: parent\n    }) && parentPath.parentPath.parentPath.isObjectPattern() || parentPath.isArrayPattern() || parentPath.isAssignmentPattern({\n      left: node\n    }) && parentPath.parentPath.isArrayPattern() || parentPath.isRestElement()) {\n      member.replaceWith(this.destructureSet(member));\n      return;\n    }\n\n    member.replaceWith(this.get(member));\n  }\n\n};\n\nfunction memberExpressionToFunctions(path, visitor, state) {\n  path.traverse(visitor, Object.assign({}, handle, state, {\n    memoiser: new AssignmentMemoiser()\n  }));\n}"]},"metadata":{},"sourceType":"script"}