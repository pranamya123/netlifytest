{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _helperPluginUtils = require(\"@babel/helper-plugin-utils\");\n\nvar _core = require(\"@babel/core\");\n\nconst TRACE_ID = \"__source\";\nconst FILE_NAME_VAR = \"_jsxFileName\";\n\nvar _default = (0, _helperPluginUtils.declare)(api => {\n  api.assertVersion(7);\n\n  function makeTrace(fileNameIdentifier, lineNumber, column0Based) {\n    const fileLineLiteral = lineNumber != null ? _core.types.numericLiteral(lineNumber) : _core.types.nullLiteral();\n    const fileColumnLiteral = column0Based != null ? _core.types.numericLiteral(column0Based + 1) : _core.types.nullLiteral();\n\n    const fileNameProperty = _core.types.objectProperty(_core.types.identifier(\"fileName\"), fileNameIdentifier);\n\n    const lineNumberProperty = _core.types.objectProperty(_core.types.identifier(\"lineNumber\"), fileLineLiteral);\n\n    const columnNumberProperty = _core.types.objectProperty(_core.types.identifier(\"columnNumber\"), fileColumnLiteral);\n\n    return _core.types.objectExpression([fileNameProperty, lineNumberProperty, columnNumberProperty]);\n  }\n\n  const visitor = {\n    JSXOpeningElement(path, state) {\n      const id = _core.types.jsxIdentifier(TRACE_ID);\n\n      const location = path.container.openingElement.loc;\n\n      if (!location) {\n        return;\n      }\n\n      const attributes = path.container.openingElement.attributes;\n\n      for (let i = 0; i < attributes.length; i++) {\n        const name = attributes[i].name;\n\n        if ((name == null ? void 0 : name.name) === TRACE_ID) {\n          return;\n        }\n      }\n\n      if (!state.fileNameIdentifier) {\n        const fileName = state.filename || \"\";\n        const fileNameIdentifier = path.scope.generateUidIdentifier(FILE_NAME_VAR);\n        const scope = path.hub.getScope();\n\n        if (scope) {\n          scope.push({\n            id: fileNameIdentifier,\n            init: _core.types.stringLiteral(fileName)\n          });\n        }\n\n        state.fileNameIdentifier = fileNameIdentifier;\n      }\n\n      const trace = makeTrace(_core.types.cloneNode(state.fileNameIdentifier), location.start.line, location.start.column);\n      attributes.push(_core.types.jsxAttribute(id, _core.types.jsxExpressionContainer(trace)));\n    }\n\n  };\n  return {\n    name: \"transform-react-jsx-source\",\n    visitor\n  };\n});\n\nexports.default = _default;","map":{"version":3,"sources":["/Users/pranamyavadlamani/Desktop/Research/PortFolio/portfolio-site/node_modules/@babel/plugin-transform-react-jsx-source/lib/index.js"],"names":["Object","defineProperty","exports","value","default","_helperPluginUtils","require","_core","TRACE_ID","FILE_NAME_VAR","_default","declare","api","assertVersion","makeTrace","fileNameIdentifier","lineNumber","column0Based","fileLineLiteral","types","numericLiteral","nullLiteral","fileColumnLiteral","fileNameProperty","objectProperty","identifier","lineNumberProperty","columnNumberProperty","objectExpression","visitor","JSXOpeningElement","path","state","id","jsxIdentifier","location","container","openingElement","loc","attributes","i","length","name","fileName","filename","scope","generateUidIdentifier","hub","getScope","push","init","stringLiteral","trace","cloneNode","start","line","column","jsxAttribute","jsxExpressionContainer"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,kBAAkB,GAAGC,OAAO,CAAC,4BAAD,CAAhC;;AAEA,IAAIC,KAAK,GAAGD,OAAO,CAAC,aAAD,CAAnB;;AAEA,MAAME,QAAQ,GAAG,UAAjB;AACA,MAAMC,aAAa,GAAG,cAAtB;;AAEA,IAAIC,QAAQ,GAAG,CAAC,GAAGL,kBAAkB,CAACM,OAAvB,EAAgCC,GAAG,IAAI;AACpDA,EAAAA,GAAG,CAACC,aAAJ,CAAkB,CAAlB;;AAEA,WAASC,SAAT,CAAmBC,kBAAnB,EAAuCC,UAAvC,EAAmDC,YAAnD,EAAiE;AAC/D,UAAMC,eAAe,GAAGF,UAAU,IAAI,IAAd,GAAqBT,KAAK,CAACY,KAAN,CAAYC,cAAZ,CAA2BJ,UAA3B,CAArB,GAA8DT,KAAK,CAACY,KAAN,CAAYE,WAAZ,EAAtF;AACA,UAAMC,iBAAiB,GAAGL,YAAY,IAAI,IAAhB,GAAuBV,KAAK,CAACY,KAAN,CAAYC,cAAZ,CAA2BH,YAAY,GAAG,CAA1C,CAAvB,GAAsEV,KAAK,CAACY,KAAN,CAAYE,WAAZ,EAAhG;;AAEA,UAAME,gBAAgB,GAAGhB,KAAK,CAACY,KAAN,CAAYK,cAAZ,CAA2BjB,KAAK,CAACY,KAAN,CAAYM,UAAZ,CAAuB,UAAvB,CAA3B,EAA+DV,kBAA/D,CAAzB;;AAEA,UAAMW,kBAAkB,GAAGnB,KAAK,CAACY,KAAN,CAAYK,cAAZ,CAA2BjB,KAAK,CAACY,KAAN,CAAYM,UAAZ,CAAuB,YAAvB,CAA3B,EAAiEP,eAAjE,CAA3B;;AAEA,UAAMS,oBAAoB,GAAGpB,KAAK,CAACY,KAAN,CAAYK,cAAZ,CAA2BjB,KAAK,CAACY,KAAN,CAAYM,UAAZ,CAAuB,cAAvB,CAA3B,EAAmEH,iBAAnE,CAA7B;;AAEA,WAAOf,KAAK,CAACY,KAAN,CAAYS,gBAAZ,CAA6B,CAACL,gBAAD,EAAmBG,kBAAnB,EAAuCC,oBAAvC,CAA7B,CAAP;AACD;;AAED,QAAME,OAAO,GAAG;AACdC,IAAAA,iBAAiB,CAACC,IAAD,EAAOC,KAAP,EAAc;AAC7B,YAAMC,EAAE,GAAG1B,KAAK,CAACY,KAAN,CAAYe,aAAZ,CAA0B1B,QAA1B,CAAX;;AAEA,YAAM2B,QAAQ,GAAGJ,IAAI,CAACK,SAAL,CAAeC,cAAf,CAA8BC,GAA/C;;AAEA,UAAI,CAACH,QAAL,EAAe;AACb;AACD;;AAED,YAAMI,UAAU,GAAGR,IAAI,CAACK,SAAL,CAAeC,cAAf,CAA8BE,UAAjD;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,UAAU,CAACE,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AAC1C,cAAME,IAAI,GAAGH,UAAU,CAACC,CAAD,CAAV,CAAcE,IAA3B;;AAEA,YAAI,CAACA,IAAI,IAAI,IAAR,GAAe,KAAK,CAApB,GAAwBA,IAAI,CAACA,IAA9B,MAAwClC,QAA5C,EAAsD;AACpD;AACD;AACF;;AAED,UAAI,CAACwB,KAAK,CAACjB,kBAAX,EAA+B;AAC7B,cAAM4B,QAAQ,GAAGX,KAAK,CAACY,QAAN,IAAkB,EAAnC;AACA,cAAM7B,kBAAkB,GAAGgB,IAAI,CAACc,KAAL,CAAWC,qBAAX,CAAiCrC,aAAjC,CAA3B;AACA,cAAMoC,KAAK,GAAGd,IAAI,CAACgB,GAAL,CAASC,QAAT,EAAd;;AAEA,YAAIH,KAAJ,EAAW;AACTA,UAAAA,KAAK,CAACI,IAAN,CAAW;AACThB,YAAAA,EAAE,EAAElB,kBADK;AAETmC,YAAAA,IAAI,EAAE3C,KAAK,CAACY,KAAN,CAAYgC,aAAZ,CAA0BR,QAA1B;AAFG,WAAX;AAID;;AAEDX,QAAAA,KAAK,CAACjB,kBAAN,GAA2BA,kBAA3B;AACD;;AAED,YAAMqC,KAAK,GAAGtC,SAAS,CAACP,KAAK,CAACY,KAAN,CAAYkC,SAAZ,CAAsBrB,KAAK,CAACjB,kBAA5B,CAAD,EAAkDoB,QAAQ,CAACmB,KAAT,CAAeC,IAAjE,EAAuEpB,QAAQ,CAACmB,KAAT,CAAeE,MAAtF,CAAvB;AACAjB,MAAAA,UAAU,CAACU,IAAX,CAAgB1C,KAAK,CAACY,KAAN,CAAYsC,YAAZ,CAAyBxB,EAAzB,EAA6B1B,KAAK,CAACY,KAAN,CAAYuC,sBAAZ,CAAmCN,KAAnC,CAA7B,CAAhB;AACD;;AArCa,GAAhB;AAwCA,SAAO;AACLV,IAAAA,IAAI,EAAE,4BADD;AAELb,IAAAA;AAFK,GAAP;AAID,CA5Dc,CAAf;;AA8DA3B,OAAO,CAACE,OAAR,GAAkBM,QAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _helperPluginUtils = require(\"@babel/helper-plugin-utils\");\n\nvar _core = require(\"@babel/core\");\n\nconst TRACE_ID = \"__source\";\nconst FILE_NAME_VAR = \"_jsxFileName\";\n\nvar _default = (0, _helperPluginUtils.declare)(api => {\n  api.assertVersion(7);\n\n  function makeTrace(fileNameIdentifier, lineNumber, column0Based) {\n    const fileLineLiteral = lineNumber != null ? _core.types.numericLiteral(lineNumber) : _core.types.nullLiteral();\n    const fileColumnLiteral = column0Based != null ? _core.types.numericLiteral(column0Based + 1) : _core.types.nullLiteral();\n\n    const fileNameProperty = _core.types.objectProperty(_core.types.identifier(\"fileName\"), fileNameIdentifier);\n\n    const lineNumberProperty = _core.types.objectProperty(_core.types.identifier(\"lineNumber\"), fileLineLiteral);\n\n    const columnNumberProperty = _core.types.objectProperty(_core.types.identifier(\"columnNumber\"), fileColumnLiteral);\n\n    return _core.types.objectExpression([fileNameProperty, lineNumberProperty, columnNumberProperty]);\n  }\n\n  const visitor = {\n    JSXOpeningElement(path, state) {\n      const id = _core.types.jsxIdentifier(TRACE_ID);\n\n      const location = path.container.openingElement.loc;\n\n      if (!location) {\n        return;\n      }\n\n      const attributes = path.container.openingElement.attributes;\n\n      for (let i = 0; i < attributes.length; i++) {\n        const name = attributes[i].name;\n\n        if ((name == null ? void 0 : name.name) === TRACE_ID) {\n          return;\n        }\n      }\n\n      if (!state.fileNameIdentifier) {\n        const fileName = state.filename || \"\";\n        const fileNameIdentifier = path.scope.generateUidIdentifier(FILE_NAME_VAR);\n        const scope = path.hub.getScope();\n\n        if (scope) {\n          scope.push({\n            id: fileNameIdentifier,\n            init: _core.types.stringLiteral(fileName)\n          });\n        }\n\n        state.fileNameIdentifier = fileNameIdentifier;\n      }\n\n      const trace = makeTrace(_core.types.cloneNode(state.fileNameIdentifier), location.start.line, location.start.column);\n      attributes.push(_core.types.jsxAttribute(id, _core.types.jsxExpressionContainer(trace)));\n    }\n\n  };\n  return {\n    name: \"transform-react-jsx-source\",\n    visitor\n  };\n});\n\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}