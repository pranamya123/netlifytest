"use strict";

var _require = require("../doc"),
    _require$builders = _require.builders,
    concat = _require$builders.concat,
    join = _require$builders.join,
    line = _require$builders.line;

function printHtmlBinding(path, options, print) {
  var node = path.getValue();

  if (options.__onHtmlBindingRoot && path.getName() === null) {
    options.__onHtmlBindingRoot(node);
  }

  if (node.type !== "File") {
    return;
  }

  if (options.__isVueForBindingLeft) {
    return path.call(function (functionDeclarationPath) {
      var _functionDeclarationP = functionDeclarationPath.getValue(),
          params = _functionDeclarationP.params;

      return concat([params.length > 1 ? "(" : "", join(concat([",", line]), functionDeclarationPath.map(print, "params")), params.length > 1 ? ")" : ""]);
    }, "program", "body", 0);
  }

  if (options.__isVueSlotScope) {
    return path.call(function (functionDeclarationPath) {
      return join(concat([",", line]), functionDeclarationPath.map(print, "params"));
    }, "program", "body", 0);
  }
} // based on https://github.com/prettier/prettier/blob/master/src/language-html/syntax-vue.js isVueEventBindingExpression()


function isVueEventBindingExpression(node) {
  switch (node.type) {
    case "MemberExpression":
      switch (node.property.type) {
        case "Identifier":
        case "NumericLiteral":
        case "StringLiteral":
          return isVueEventBindingExpression(node.object);
      }

      return false;

    case "Identifier":
      return true;

    default:
      return false;
  }
}

module.exports = {
  isVueEventBindingExpression: isVueEventBindingExpression,
  printHtmlBinding: printHtmlBinding
};